/*
    Copyright (c) 2012, Salesforce.org
    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of Salesforce.org nor the names of
      its contributors may be used to endorse or promote products derived
      from this software without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
    FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
    COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
    INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
    BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
    CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
    LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
    ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
    POSSIBILITY OF SUCH DAMAGE.
*/
/**
* @author Salesforce.org
* @date 2012 (2.0)
* @group Recurring Donations
* @description Test class for the RecurringDonations class
*/
@isTest
public class RD_RecurringDonations_TEST {

    public static final Date DEFAULT_ESTABLISHED_DATE = TEST_RecurringDonationBuilder.DEFAULT_ESTABLISHED_DATE;
    private static final Date TODAY = System.today();
    private static final TEST_SObjectGateway.RecurringDonationGateway rdGateway = new TEST_SObjectGateway.RecurringDonationGateway();

    /*******************************************************************************************************
    * @description test method for insertOpportunities function
    */
    @isTest
    private static void insertOpportunities()
    {
        UTIL_Debug.debug('multiply: ' + RD_Constants.SCHEDULE_TYPE_MULTIPLY_BY);
        UTIL_Debug.debug('divide: ' + RD_Constants.SCHEDULE_TYPE_DIVIDE_BY);
        Account a = buildAccount();
        insert a;

        Contact c = buildContact(a.Id);
        insert c;

        //added to cover
        npe03__Custom_Field_Mapping__c cfm = new npe03__Custom_Field_Mapping__c(
            npe03__Recurring_Donation_Field__c = 'Name',
            npe03__Opportunity_Field__c = 'Description',
            Name = 'CFMName00001-Test'
        );
        insert cfm;

        npe03__Recurring_Donation__c r0 = buildRecurringDonationYearlyInstallment(null);
        r0.npe03__Installments__c = 3;
        try {
            insert r0;
        } catch (Exception e) {
            ERR_Handler.processError(e, ERR_Handler_API.Context.RD);
        }
        //insert should fail because there is no Contact
        System.assertEquals(null,r0.id);


        npe03__Recurring_Donation__c rd = buildRecurringDonationYearlyInstallment(c.Id);
        insert rd;

        Opportunity[] installments1 = getOppsOrderByCloseDate(rd.id);
        System.assertEquals(2,installments1.size());
        System.assertEquals(100,installments1[0].Amount);
        System.assertEquals(DEFAULT_ESTABLISHED_DATE,installments1[0].CloseDate);
        System.assertEquals(a.id,installments1[0].AccountId);
        System.assertEquals(100,installments1[1].Amount);
        System.assertEquals(DEFAULT_ESTABLISHED_DATE.addYears(1),installments1[1].CloseDate);
        System.assertEquals(a.id,installments1[1].AccountId);
        System.assertNotEquals(null, installments1[0].Description);
        System.assertNotEquals(null, installments1[1].Description);
        UTIL_Debug.debug('****' + installments1);
    }

    /***
    * @description Verifies name is autogenerated when Recurring Donations are inserted
    */
    @isTest
    private static void shouldAutogenerateNameOnInsertUsingDefaultFormat() {
        Account a = buildAccount();
        insert a;

        Contact c = buildContact(a.Id);
        insert c;

        List<npe03__Recurring_Donation__c> rds = new List<npe03__Recurring_Donation__c>{
            buildRecurringDonationWeeklyInstallment(c.Id),
            buildRecurringDonationMonthlyInstallment(null)
        };
        rds[1].npe03__Amount__c = 200;
        rds[1].npe03__Organization__c = a.Id;

        Test.startTest();
        RD2_NamingService_TEST.enableAutomaticNaming();

        insert rds;
        Test.stopTest();

        Map<Id, npe03__Recurring_Donation__c> actualRdById = new Map<Id, npe03__Recurring_Donation__c>(
            rdGateway.getRecords(rds)
        );
        System.assertEquals(rds.size(), actualRdById.size(), 'Number of RDs should match');

        String rdName1 = RD2_NamingService_TEST.getDefaultExpectedName(c, '100', null);
        String rdName2 = RD2_NamingService_TEST.getDefaultExpectedName(a, '200', null);

        System.assertEquals(rdName1, actualRdById.get(rds[0].Id).Name, 'RD name should match');
        System.assertEquals(rdName2, actualRdById.get(rds[1].Id).Name, 'RD name should match');
    }

    /***
    * @description Verifies name is autogenerated when Recurring Donations are inserted
    * using a non-default naming format
    */
    @isTest
    private static void shouldAutogenerateNameOnInsertWithNonDefaultFormat() {
        Account a = buildAccount();
        insert a;

        Contact c = buildContact(a.Id);
        insert c;

        List<npe03__Recurring_Donation__c> rds = new List<npe03__Recurring_Donation__c>{
            buildRecurringDonationWeeklyInstallment(c.Id),
            buildRecurringDonationMonthlyInstallment(null)
        };
        rds[1].npe03__Amount__c = 200;
        rds[1].npe03__Organization__c = a.Id;

        Test.startTest();
        RD2_NamingService_TEST.enableAutomaticNaming();
        npe03__Recurring_Donations_Settings__c rdSettings = UTIL_CustomSettingsFacade.getRecurringDonationsSettings();
        rdSettings.RecurringDonationNameFormat__c = RD2_NamingService.RD_NAMING_OPTION_2;

        insert rds;
        Test.stopTest();

        Map<Id, npe03__Recurring_Donation__c> actualRdById = new Map<Id, npe03__Recurring_Donation__c>(
            rdGateway.getRecords(rds)
        );
        System.assertEquals(rds.size(), actualRdById.size(), 'Number of RDs should match');

        String rdName1 = RD2_NamingService_TEST.getExpectedName(rdSettings.RecurringDonationNameFormat__c,
            RD2_Constants.INSTALLMENT_PERIOD_WEEKLY, '100', null, c, null);
        String rdName2 = RD2_NamingService_TEST.getExpectedName(rdSettings.RecurringDonationNameFormat__c,
            RD2_Constants.INSTALLMENT_PERIOD_MONTHLY, '200', null, null, a);

        System.assertEquals(rdName1, actualRdById.get(rds[0].Id).Name, 'RD name should match');
        System.assertEquals(rdName2, actualRdById.get(rds[1].Id).Name, 'RD name should match');
    }

    /***
    * @description Verifies name stays as is when Recurring Donations are updated
    */
    @isTest
    private static void shouldNotAutogenerateNameOnUpdate() {
        Account a = buildAccount();
        insert a;

        npe03__Recurring_Donation__c rd = buildRecurringDonationMonthlyInstallment(null);
        rd.npe03__Organization__c = a.id;
        String name = rd.Name;
        insert rd;

        rd = rdGateway.getRecord(rd.Id);
        System.assertEquals(name, rd.Name, 'The RD name should be unchanged');

        Test.startTest();
        RD2_NamingService_TEST.enableAutomaticNaming();

        rd.npe03__Amount__c = 200;
        update rd;
        Test.stopTest();

        rd = rdGateway.getRecord(rd.Id);
        System.assertEquals(name, rd.Name, 'The RD name should be unchanged');
    }

    @isTest
    private static void insertWeeklyOpportunities() {
        Account a = buildAccount();
        insert a;

        Contact c = buildContact(a.Id);
        insert c;

        npe03__Recurring_Donation__c rd = buildRecurringDonationWeeklyInstallment(c.Id);
        insert rd;

        Opportunity[] installments1 = getOppsOrderByCloseDate(rd.id);
        System.assertEquals(2,installments1.size());
        System.assertEquals(100,installments1[0].Amount);
        System.assertEquals(DEFAULT_ESTABLISHED_DATE,installments1[0].CloseDate);
        System.assertEquals(a.id,installments1[0].AccountId);
        System.assertEquals(100,installments1[1].Amount);
        System.assertEquals(DEFAULT_ESTABLISHED_DATE.addDays(7),installments1[1].CloseDate);
        System.assertEquals(a.id,installments1[1].AccountId);
    }


    @isTest
    private static void insertQuarterlyOpportunities() {
        Account a = buildAccount();
        insert a;

        Contact c = buildContact(a.Id);
        insert c;

        npe03__Recurring_Donation__c rd = buildRecurringDonationQuarterlyInstallment(c.Id);
        insert rd;

        Opportunity[] installments1 = getOppsOrderByCloseDate(rd.id);
        System.assertEquals(2,installments1.size());
        System.assertEquals(100,installments1[0].Amount);
        System.assertEquals(DEFAULT_ESTABLISHED_DATE,installments1[0].CloseDate);
        System.assertEquals(a.id,installments1[0].AccountId);
        System.assertEquals(100,installments1[1].Amount);
        System.assertEquals(DEFAULT_ESTABLISHED_DATE.addMonths(3),installments1[1].CloseDate);
        System.assertEquals(a.id,installments1[1].AccountId);
    }


    @isTest
    private static void insertCampaignOpportunities() {
        UTIL_CustomSettingsFacade.getRecurringDonationsSettingsForTest(new npe03__Recurring_Donations_Settings__c());
        Account a = buildAccount();
        insert a;

        Contact c = buildContact(a.Id);
        insert c;

        Campaign camp = new Campaign();
        camp.Name = 'test campaign';
        insert camp;

        npe03__Recurring_Donation__c rd = buildRecurringDonationWeeklyInstallment(c.Id);
        rd.npe03__Recurring_Donation_Campaign__c = camp.id;
        insert rd;

        Opportunity[] installments1 = getOppsOrderByCloseDate(rd.id);
        System.assertEquals(2,installments1.size());
        System.assertEquals(100,installments1[0].Amount);
        System.assertEquals(DEFAULT_ESTABLISHED_DATE,installments1[0].CloseDate);
        System.assertEquals(camp.id,installments1[0].CampaignId);
        System.assertEquals(a.id,installments1[0].AccountId);
        System.assertEquals(100,installments1[1].Amount);
        System.assertEquals(DEFAULT_ESTABLISHED_DATE.addDays(7),installments1[1].CloseDate);
        System.assertEquals(camp.id,installments1[0].CampaignId);
        System.assertEquals(a.id,installments1[1].AccountId);
    }


    @isTest
    private static void deleteRecurringDonation() {
        Account a = buildAccount();
        insert a;

        npe03__Recurring_Donation__c r2 = buildRecurringDonationMonthlyInstallment(null);
        r2.npe03__Installments__c = 3;
        r2.npe03__Organization__c = a.Id;
        r2.npe03__Date_Established__c = Date.newInstance(1970,6,30);
        r2.npe03__Schedule_Type__c = RD_Constants.SCHEDULE_TYPE_DIVIDE_BY;
        insert r2;

        Opportunity[] installments2 = getOpps(r2.id);
        System.assertEquals(3,installments2.size());
        System.assertEquals(33.33,installments2[0].Amount);
        System.assertEquals(Date.newInstance(1970,6,30),installments2[0].CloseDate);
        System.assertEquals(33.33,installments2[1].Amount);
        System.assertEquals(Date.newInstance(1970,7,30),installments2[1].CloseDate);
        System.assertEquals(33.34,installments2[2].Amount);
        System.assertEquals(Date.newInstance(1970,8,30),installments2[2].CloseDate);
        System.assertEquals(a.id,installments2[0].AccountId);
        UTIL_Debug.debug('**** '+installments2);

        delete r2;

        //delete should cascade related opps that aren't closed/won
        Opportunity[] installments3 = [select Amount, IsDeleted from Opportunity where IsDeleted=true ALL ROWS];
        System.assertEquals(3,installments3.size());
        System.assertEquals(33.33,installments3[0].Amount);

        undelete r2;

        installments3 = getOpps(r2.id);
        System.assertEquals(false,installments3[0].IsDeleted, 'Record should be undeleted.');
    }

    @isTest
    private static void shouldDispatchRDsToIntegrationGatewayOnBeforeDelete() {
        List<npe03__Recurring_Donation__c> rds = new List<npe03__Recurring_Donation__c> {
            buildRecurringDonationMonthlyInstallment(null),
            buildRecurringDonationMonthlyInstallment(null),
            buildRecurringDonationMonthlyInstallment(null)
        };

        UTIL_UnitTestData_TEST.setMockIds(rds);

        RD_RecurringDonations_TDTM tdtm = new RD_RecurringDonations_TDTM();
        UTIL_IntegrationGateway_TEST.Stub gatewayStub = new UTIL_IntegrationGateway_TEST.Stub();
        tdtm.integrationGateway = (UTIL_IntegrationGateway) Test.createStub(UTIL_IntegrationGateway.class, gatewayStub);

        Test.startTest();
        tdtm.run(
            null,
            rds,
            TDTM_Runnable.Action.BeforeDelete,
            npe03__Recurring_Donation__c.SObjectType.getDescribe()
        );
        Test.stopTest();

        System.assert(gatewayStub.paramsByMethodName.containsKey('handleBeforeDelete'),
            'handleBeforeDelete should have been called on the integration gateway');

        Map<String, Object> paramsForMethod = gatewayStub.paramsByMethodName.get('handleBeforeDelete');

        System.assertEquals(rds, paramsForMethod.get('triggerOld'),
            'The triggerOld parameter should contain the data from the oldList parameter');
    }

    @isTest
    private static void contactRolesOnOppsBucket() {
        //skip the test if Advancement is installed - Bucket Account not supported in ADV
        if (ADV_PackageInfo_SVC.useAdv()) return;

        contactRolesOnOppsProcessor(CAO_Constants.BUCKET_PROCESSOR);
    }

    @isTest
    private static void contactRolesOnOppsOne2One() {
        contactRolesOnOppsProcessor(CAO_Constants.ONE_TO_ONE_PROCESSOR);
    }

    @isTest
    private static void contactRolesOnOppsHHAccount() {
        contactRolesOnOppsProcessor(CAO_Constants.HH_ACCOUNT_PROCESSOR);
    }

    private static void contactRolesOnOppsProcessor(String strProcessor) {
        UTIL_CustomSettingsFacade.getContactsSettingsForTests(new npe01__Contacts_and_Orgs_Settings__c(
            npe01__Account_Processor__c = strProcessor,
            npe01__Opportunity_Contact_Role_Default_role__c = System.Label.npe03.RecurringDonationContactRole
        ));

        CAO_Constants.setIndividualAccountForTests(CAO_Constants.INDIVIDUAL_ACCOUNT_NAME_FOR_TESTS);

        Contact c = buildContact(null);
        insert c;

        Test.startTest();
        npe03__Recurring_Donation__c rd = buildRecurringDonationWeeklyInstallment(c.Id);
        insert rd;
        Test.stopTest();

        OpportunityContactRole[] installmentCRs = [
            SELECT ContactId, OpportunityId, Role
            FROM OpportunityContactRole
            WHERE Opportunity.npe03__Recurring_Donation__c = :rd.id
        ];
        System.assertEquals(2,installmentCRs.size());
        System.assertEquals(System.Label.npe03.RecurringDonationContactRole, installmentCRs[0].Role);
    }

    /*********************************************************************************************************
    @description
        Verify Primary Opportunity Contact Roles (OCRs) creation using oppContactRoles().
        NOTE: Test the method even though it has not been used since NPSP3 which always
        leverages npe01__Contact_Id_for_Role__c field on Opportunity instead of calling this method.
    verify:
        - New Primary OCRs are created for provided Opportunities having Recurring Donations
        with a specified Contact.
    **********************************************************************************************************/
    @isTest
    private static void testOppContactRoleMethod() {
        UTIL_CustomSettingsFacade.getContactsSettingsForTests(new npe01__Contacts_and_Orgs_Settings__c(
            npe01__Account_Processor__c = CAO_Constants.HH_ACCOUNT_PROCESSOR,
            npe01__Opportunity_Contact_Role_Default_role__c = System.Label.npe03.RecurringDonationContactRole
        ));

        CAO_Constants.setIndividualAccountForTests(CAO_Constants.INDIVIDUAL_ACCOUNT_NAME_FOR_TESTS);

        List<Contact> contacts = UTIL_UnitTestData_TEST.createMultipleTestContacts(3);
        insert contacts;
        contacts = new List<Contact>([SELECT LastName, AccountId FROM Contact]);

        List<npe03__Recurring_Donation__c> rds = TEST_RecurringDonationBuilder.constructLegacyBuilder()
            .withAmount(100)
            .withInstallmentPeriodYearly()
            .withDateEstablished(DEFAULT_ESTABLISHED_DATE)
            .withScheduleTypeMultiplyValue()
            .build(contacts);

        // Execute the insert of Recurring Donations in start/stop Test to create Primary OCRs
        // by utilizing npe01__Contact_Id_for_Role__c field on Opportunity if it exists.
        // Otherwise, the Recurring Donations code should execute oppContactRoles() instead.
        Test.startTest();
        insert rds;
        Test.stopTest();

        List<Opportunity> opps = getOpps(rds);

        opps.add(new Opportunity(
            Amount = 200,
            AccountId = contacts[0].AccountId,
            Name = 'Test Opp',
            StageName = UTIL_UnitTestData_TEST.getClosedWonStage(),
            CloseDate = TODAY,
            npe03__Recurring_Donation__c = rds[0].Id
        ));
        upsert opps;

        Set<Id> oppIds = new Map<Id, Opportunity>(opps).keySet();
        Set<Id> rdIds = new Map<Id, npe03__Recurring_Donation__c>(rds).keySet();

        delete getPrimaryOppContactRoles(rdIds);
        System.assertEquals(0, getPrimaryOppContactRoles(rdIds).size(), 'OCRs should be deleted if created');

        RD_RecurringDonations.oppContactRoles(oppIds);

        System.assertEquals(opps.size(), getPrimaryOppContactRoles(rdIds).size(), 'OCR should be created for each Opportunity');

        // Execute the method again and ensure no duplicate OCR is created
        RD_RecurringDonations.oppContactRoles(oppIds);
        System.assertEquals(opps.size(), getPrimaryOppContactRoles(rdIds).size(), 'No new OCR should be created when oppContactRoles() is called once more');
    }


    @isTest
    private static void testSettingsCreation() {
        delete [select id from npe03__Recurring_Donations_Settings__c];

        //Using the API class just to give it test coverage.
        npe03__Recurring_Donations_Settings__c rds = UTIL_CustomSettings_API.getRecurringDonationsSettings();
        System.assertEquals(12, rds.npe03__Opportunity_Forecast_Months__c);
        System.assertEquals(50, rds.npe03__Maximum_Donations__c);
        System.assertEquals(RD_RecurringDonations.RecurringDonationCloseOptions.Mark_Opportunities_Closed_Lost.name(), rds.npe03__Open_Opportunity_Behavior__c);
    }


    //tests inserts of various types of open ended donations
    @isTest
    private static void insertOpenEndedRecurringDonations(){
        createRdSettingsWithYearForecast();

        Account a = buildAccount();
        insert a;

        Contact c = buildContact(a.Id);
        insert c;

        Campaign camp = new Campaign(Name = 'Campaign', isActive = true);
        insert camp;

        TEST_RecurringDonationBuilder rdBuilder = TEST_RecurringDonationBuilder.constructLegacyBuilder()
            .withAmount(100)
            .withDateEstablished(TODAY.toStartOfMonth())
            .withOpenEndedStatusOpen();

        List<npe03__Recurring_Donation__c> rdlist = new List<npe03__Recurring_Donation__c>{
            rdBuilder
                .withName('testweekly')
                .withContact(c.Id)
                .withInstallmentPeriodWeekly()
                .build(),
            rdBuilder
                .withName('testmonthly')
                .withAccount(a.Id)
                .withContact(null)
                .withCampaign(camp.Id)
                .withInstallmentPeriodMonthly()
                .build(),
            rdBuilder
                .withName('testquarterly')
                .withInstallmentPeriodQuarterly()
                .build(),
            rdBuilder
                .withName('testyearly')
                .withInstallmentPeriodYearly()
                .build(),
            rdBuilder
                .withName('testbadinstallment')
                .withInstallmentPeriod('GarbageValue')
                .build()
        };

        test.startTest();
        insert rdlist;
        test.stopTest();

        System.assertEquals(12, [select count() from Opportunity where npe03__Recurring_Donation__r.Name = 'testmonthly']);
        System.assertEquals(4, [select count() from Opportunity where npe03__Recurring_Donation__r.Name = 'testquarterly']);
        System.assertEquals(1, [select count() from Opportunity where npe03__Recurring_Donation__r.Name = 'testyearly']);
        Integer cOpp =  [select count() from Opportunity where npe03__Recurring_Donation__r.Name = 'testweekly'];
        System.assert(cOpp == 52 || cOpp == 53);
    }


    @isTest
    private static void updateOpenEndedRecurringDonationMonthly(){
        createRdSettingsWithYearForecast();

        Account a = buildAccount();
        insert a;

        Contact c = buildContact(a.Id);
        insert c;

        npe03__Recurring_Donation__c rd = buildRecurringDonationWeeklyInstallment(c.Id);
        rd.npe03__Open_Ended_Status__c = RD_Constants.OPEN_ENDED_STATUS_OPEN;
        rd.npe03__Next_Payment_Date__c = TODAY.toStartOfMonth();
        insert rd;

        List<Opportunity> originalOpps = getOppsOrderByCloseDate(rd.id);

        Integer cOpp =  originalOpps.size();
        System.assert(cOpp == 52 || cOpp == 53);
        System.assertEquals(100, originalOpps[0].Amount);

        Test.startTest();
        rd.npe03__Installment_Period__c = RD2_Constants.INSTALLMENT_PERIOD_MONTHLY;
        update rd;
        Test.stopTest();

        System.assertEquals(12, getOppsOrderByCloseDate(rd.id).size());
    }

    @isTest
    private static void updateOpenEndedRecurringDonation1an15(){
        createRdSettingsCampaignWithYearForecast();

        Account a = buildAccount();
        insert a;

        Contact c = buildContact(a.Id);
        insert c;

        npe03__Recurring_Donation__c rd = buildRecurringDonation(
            c.Id, RD_Constants.INSTALLMENT_PERIOD_FIRST_AND_FIFTEENTH
        );
        rd.npe03__Open_Ended_Status__c = RD_Constants.OPEN_ENDED_STATUS_OPEN;
        rd.npe03__Next_Payment_Date__c = TODAY;

        Test.startTest();
        insert rd;
        Test.stopTest();

        List<Opportunity> originalOpps = getOppsOrderByCloseDate(rd.id);
        Integer cOpp =  originalOpps.size();
        System.assert(cOpp == 23 || cOpp == 24);
        System.assertEquals(100, originalOpps[0].Amount);
    }


    @isTest
    private static void updateOpenEndedRecurringDonationYearly(){
        createRdSettingsWithYearForecast();

        Account a = buildAccount();
        insert a;

        Contact c = buildContact(a.Id);
        insert c;

        npe03__Recurring_Donation__c rd = buildRecurringDonationWeeklyInstallment(c.Id);
        rd.npe03__Open_Ended_Status__c = RD_Constants.OPEN_ENDED_STATUS_OPEN;
        rd.npe03__Next_Payment_Date__c = TODAY.toStartOfMonth();
        insert rd;

        List<Opportunity> originalOpps = getOppsOrderByCloseDate(rd.id);

        Integer cOpp =  originalOpps.size();
        System.assert(cOpp == 52 || cOpp == 53);
        System.assertEquals(100, originalOpps[0].Amount);

        Test.startTest();
        rd.npe03__Installment_Period__c = RD_Constants.INSTALLMENT_PERIOD_YEARLY;
        update rd;
        Test.stopTest();

        System.assertEquals(1, getOppsOrderByCloseDate(rd.id).size());
    }

    @isTest
    private static void updateOpenEndedRecurringDonationWeekly(){
        createRdSettingsWithYearForecast();

        Account a = buildAccount();
        insert a;

        Contact c = buildContact(a.Id);
        insert c;

        npe03__Recurring_Donation__c rd = buildRecurringDonationMonthlyInstallment(c.Id);
        rd.npe03__Open_Ended_Status__c = RD_Constants.OPEN_ENDED_STATUS_OPEN;
        rd.npe03__Next_Payment_Date__c = TODAY.toStartOfMonth();
        insert rd;

        List<Opportunity> originalOpps = getOppsOrderByCloseDate(rd.id);

        System.assertEquals(12, originalOpps.size());
        System.assertEquals(100, originalOpps[0].Amount);

        Test.startTest();
        rd.npe03__Installment_Period__c = RD_Constants.INSTALLMENT_PERIOD_WEEKLY;
        update rd;
        Test.stopTest();

        Integer cOpp = getOppsOrderByCloseDate(rd.id).size();
        System.assert(cOpp == 52 || cOpp == 53);
    }


    @isTest
    private static void updateOpenEndedRecurringDonationQuarterly(){
        createRdSettingsWithYearForecast();

        Account a = buildAccount();
        insert a;

        Contact c = buildContact(a.Id);
        insert c;

        npe03__Recurring_Donation__c rd = buildRecurringDonationWeeklyInstallment(c.Id);
        rd.npe03__Open_Ended_Status__c = RD_Constants.OPEN_ENDED_STATUS_OPEN;
        rd.npe03__Next_Payment_Date__c = TODAY.toStartOfMonth();
        insert rd;

        List<Opportunity> originalOpps = getOppsOrderByCloseDate(rd.id);

        Integer cOpp =  originalOpps.size();
        System.assert(cOpp == 52 || cOpp == 53);
        System.assertEquals(100, originalOpps[0].Amount);
        Test.startTest();
        rd.npe03__Installment_Period__c = RD_Constants.INSTALLMENT_PERIOD_QUARTERLY;
        update rd;
        Test.stopTest();

        System.assertEquals(4, getOppsOrderByCloseDate(rd.id).size());
    }

    //test closing an opportunity for an open recurring donation
    @isTest
    private static void closeOppForOpenEndedRecurringDonationWeekly(){
        createRdSettingsWithYearForecast();

        Account a = buildAccount();
        insert a;

        Contact c = buildContact(a.Id);
        insert c;

        npe03__Recurring_Donation__c rd = buildRecurringDonationWeeklyInstallment(c.Id);
        rd.npe03__Open_Ended_Status__c = RD_Constants.OPEN_ENDED_STATUS_OPEN;
        rd.npe03__Next_Payment_Date__c = TODAY.toStartOfMonth();
        rd.OwnerId = system.Userinfo.getUserId();
        insert rd;

        List<Opportunity> originalOpps = getOppsOrderByCloseDate(rd.id);
        Integer cOpp =  originalOpps.size();
        System.assert(cOpp == 52 || cOpp == 53);

        Opportunity o = originalOpps[0];
        o.StageName = UTIL_UnitTestData_TEST.getClosedWonStage();
        o.CloseDate = TODAY;

        Test.startTest();
        update o;
        RD_RecurringDonations.evaluateRecurringDonationsForNewOppInsert(new List<npe03__Recurring_Donation__c>{rd});
        Test.stopTest();

        rd = rdGateway.getRecord(rd.id);
        System.assertEquals(cOpp - 1, getOpenOppCount(rd.id));
        System.assertEquals(TODAY, rd.npe03__Last_Payment_Date__c);
    }
    //test closing an opportunity for an open recurring donation
    @isTest
    private static void closeOppForOpenEndedRecurringDonationMonthly(){
        createRdSettingsWithForecast(6);

        Account a = buildAccount();
        insert a;

        Contact c = buildContact(a.Id);
        insert c;

        npe03__Recurring_Donation__c rd = buildRecurringDonationYearlyInstallment(c.Id);
        rd.npe03__Open_Ended_Status__c = RD_Constants.OPEN_ENDED_STATUS_OPEN;
        rd.npe03__Next_Payment_Date__c = TODAY;
        rd.OwnerId = system.Userinfo.getUserId();
        insert rd;

        System.assertNotEquals(null, rd.id);
        List<Opportunity> originalOpps = getOppsOrderByCloseDate(rd.id);
        System.assertEquals(1, originalOpps.size());

        Opportunity o1 = originalOpps[0];
        o1.StageName = UTIL_UnitTestData_TEST.getClosedWonStage();
        o1.CloseDate = TODAY;
        List<Opportunity> oppList = new List<Opportunity>{o1};

        Test.startTest();
        update oppList;
        RD_RecurringDonations.evaluateRecurringDonationsForNewOppInsert(new List<npe03__Recurring_Donation__c>{rd});
        Test.stopTest();

        rd = rdGateway.getRecord(rd.id);
        System.assertEquals(TODAY, rd.npe03__Last_Payment_Date__c);

        originalOpps = new List<Opportunity>([select id, Name,amount,accountid,CloseDate from Opportunity where isClosed = false and npe03__Recurring_Donation__r.id = :rd.id]);
        System.assertEquals(0, originalOpps.size());
    }

    //test closing an opportunity for an open recurring donation
    @isTest
    private static void closeOppForOpenEndedRecurringDonationQuarterly(){
        createRdSettingsWithYearForecast();

        Account a = buildAccount();
        insert a;

        Contact c = buildContact(a.Id);
        insert c;

        npe03__Recurring_Donation__c rd = buildRecurringDonationQuarterlyInstallment(c.Id);
        rd.npe03__Open_Ended_Status__c = RD_Constants.OPEN_ENDED_STATUS_OPEN;
        rd.npe03__Next_Payment_Date__c = TODAY.toStartOfMonth();
        rd.OwnerId = system.Userinfo.getUserId();
        insert rd;

        List<Opportunity> originalOpps = getOppsOrderByCloseDate(rd.id);
        System.assertEquals(4, originalOpps.size());

        Opportunity o = originalOpps[0];
        system.debug('**** DJH gonna close opp with date: ' + o.CloseDate);
        System.assertEquals(TODAY.toStartOfMonth(), o.CloseDate);
        o.StageName = UTIL_UnitTestData_TEST.getClosedWonStage();
        o.CloseDate = TODAY;

        Test.startTest();
        update o;
        RD_RecurringDonations.evaluateRecurringDonationsForNewOppInsert(new List<npe03__Recurring_Donation__c>{rd});
        Test.stopTest();

        rd = rdGateway.getRecord(rd.id);
        System.assertEquals(TODAY, rd.npe03__Last_Payment_Date__c);
        System.assertEquals(3, getOpenOppCount(rd.id));
    }

    //test closing an opportunity for an open recurring donation
    @isTest
    private static void closeOppForOpenEndedRecurringDonationCustomWeeks(){
        createRdSettingsWithYearForecast();

        Account a = buildAccount();
        insert a;

        Contact c = buildContact(a.Id);
        insert c;

        npe03__Custom_Installment_Settings__c customInstallment = new npe03__Custom_Installment_Settings__c(
            npe03__Increment__c = 'Weeks',
            npe03__Value__c = 2,
            Name = 'TESTCIS'
        );
        insert customInstallment;

        npe03__Recurring_Donation__c rd = buildRecurringDonation(null, customInstallment.Name);
        rd.npe03__Organization__c = a.id;
        rd.npe03__Open_Ended_Status__c = RD_Constants.OPEN_ENDED_STATUS_OPEN;
        rd.npe03__Next_Payment_Date__c = TODAY.toStartOfMonth();
        rd.OwnerId = system.Userinfo.getUserId();
        insert rd;

        List<Opportunity> originalOpps = getOppsOrderByCloseDate(rd.id);
        Integer cOpp = originalOpps.size();
        System.assert(cOpp == 26 || cOpp == 27);

        Opportunity o = originalOpps[0];
        o.StageName = UTIL_UnitTestData_TEST.getClosedWonStage();
        o.CloseDate = TODAY;

        Test.startTest();
        update o;
        RD_RecurringDonations.evaluateRecurringDonationsForNewOppInsert(new List<npe03__Recurring_Donation__c>{rd});
        Test.stopTest();

        rd = rdGateway.getRecord(rd.id);
        System.assert(26 <= getOpenOppCount(rd.id));
        System.assertEquals(TODAY, rd.npe03__Last_Payment_Date__c);
    }

    //test closing an opportunity for an open recurring donation
    @isTest
    private static void closeOppForOpenEndedRecurringDonationCustomDays(){
        createRdSettingsWithForecast(1);

        Account a = buildAccount();
        insert a;

        Contact c = buildContact(a.Id);
        insert c;

        npe03__Custom_Installment_Settings__c customInstallment = new npe03__Custom_Installment_Settings__c(
            npe03__Increment__c = 'Days',
            npe03__Value__c = 2,
            Name = 'TESTCIS'
        );
        insert customInstallment;

        npe03__Recurring_Donation__c rd = buildRecurringDonation(null, customInstallment.Name);
        rd.npe03__Organization__c = a.id;
        rd.npe03__Open_Ended_Status__c = RD_Constants.OPEN_ENDED_STATUS_OPEN;
        rd.npe03__Next_Payment_Date__c = TODAY.toStartOfMonth();
        insert rd;

        List<Opportunity> originalOpps = getOppsOrderByCloseDate(rd.id);
        Integer cOpp =  originalOpps.size();
        System.assert(cOpp == 14 || cOpp == 15 || cOpp == 16);

        Opportunity o = originalOpps[0];
        o.StageName = UTIL_UnitTestData_TEST.getClosedWonStage();
        o.CloseDate = TODAY;

        Test.startTest();
        update o;
        Test.stopTest();

        rd = rdGateway.getRecord(rd.id);
        System.assertEquals(cOpp - 1,getOpenOppCount(rd.id));
        System.assertEquals(TODAY, rd.npe03__Last_Payment_Date__c);
    }

    //test closing an opportunity for an open recurring donation
    @isTest
    private static void closeOppForOpenEndedRecurringDonationCustomMonths(){
        createRdSettingsCampaignWithYearForecast();

        Account a = buildAccount();
        insert a;

        Contact c = buildContact(a.Id);
        insert c;

        npe03__Custom_Installment_Settings__c customInstallment = new npe03__Custom_Installment_Settings__c(
            npe03__Increment__c = 'Months',
            npe03__Value__c = 2,
            Name = 'TESTCIS'
        );
        insert customInstallment;

        npe03__Recurring_Donation__c rd = buildRecurringDonation(null, customInstallment.Name);
        rd.npe03__Organization__c = a.id;
        rd.npe03__Date_Established__c = Date.newInstance(2000,1,1);
        rd.npe03__Open_Ended_Status__c = RD_Constants.OPEN_ENDED_STATUS_OPEN;
        rd.npe03__Next_Payment_Date__c = TODAY.toStartOfMonth();
        rd.OwnerId = system.Userinfo.getUserId();
        insert rd;

        List<Opportunity> originalOpps = getOppsOrderByCloseDate(rd.id);
        System.assertEquals(6, originalOpps.size());

        Opportunity o = originalOpps[0];
        o.StageName = UTIL_UnitTestData_TEST.getClosedWonStage();
        o.CloseDate = TODAY;

        Test.startTest();
        update o;
        RD_RecurringDonations.evaluateRecurringDonationsForNewOppInsert(new List<npe03__Recurring_Donation__c>{rd});
        Test.stopTest();

        rd = rdGateway.getRecord(rd.id);
        System.assertEquals(5, getOpenOppCount(rd.id));
        System.assertEquals(TODAY, rd.npe03__Last_Payment_Date__c);
    }

    //test closing an opportunity for an open recurring donation
    @isTest
    private static void closeOppForOpenEndedRecurringDonationCustomYears(){
        createRdSettingsCampaignWithYearForecast();

        Account a = buildAccount();
        insert a;

        Contact c = buildContact(a.Id);
        insert c;

        npe03__Custom_Installment_Settings__c customInstallment = new npe03__Custom_Installment_Settings__c(
            npe03__Increment__c = 'Years',
            npe03__Value__c = 2,
            Name = 'TESTCIS'
        );
        insert customInstallment;

        npe03__Recurring_Donation__c rd = buildRecurringDonation(null, customInstallment.Name);
        rd.npe03__Organization__c = a.id;
        rd.npe03__Open_Ended_Status__c = RD_Constants.OPEN_ENDED_STATUS_OPEN;
        rd.npe03__Next_Payment_Date__c = TODAY;
        rd.OwnerId = system.Userinfo.getUserId();
        insert rd;

        List<Opportunity> originalOpps = getOppsOrderByCloseDate(rd.id);
        System.assertEquals(1, originalOpps.size());

        Opportunity o = originalOpps[0];
        o.StageName = UTIL_UnitTestData_TEST.getClosedWonStage();
        o.CloseDate = TODAY;

        Test.startTest();
        update o;
        RD_RecurringDonations.evaluateRecurringDonationsForNewOppInsert(new List<npe03__Recurring_Donation__c>{rd});
        Test.stopTest();

        rd = rdGateway.getRecord(rd.id);
        System.assertEquals(0, getOpenOppCount(rd.id));
        System.assertEquals(TODAY, rd.npe03__Last_Payment_Date__c);
    }

    // Helpers
    ////////////

    /*******************************************************************************************************
    * @description Builds an account record with default values
    * @return Account
    */
    private static Account buildAccount() {
        return new Account(Name = 'test Individual');
    }

    /*******************************************************************************************************
    * @description Builds a contact record with default values
    * @param accId Id of the account to assign to the contact
    * @return Contact
    */
    private static Contact buildContact(Id accId) {
        Contact c = UTIL_UnitTestData_TEST.getContact();
        c.AccountId = accId;

        return c;
    }

    /*******************************************************************************************************
    * @description Builds a recurring donation with yearly installment
    * @param contactId Id of the contact to assign to the recurring donation
    * @return npe03__Recurring_Donation__c
    */
    public static npe03__Recurring_Donation__c buildRecurringDonationYearlyInstallment(Id contactId) {
        return buildRecurringDonation(contactId, RD_Constants.INSTALLMENT_PERIOD_YEARLY);
    }

    /*******************************************************************************************************
    * @description Builds a recurring donation with quarterly installment
    * @param contactId Id of the contact to assign to the recurring donation
    * @return npe03__Recurring_Donation__c
    */
    public static npe03__Recurring_Donation__c buildRecurringDonationQuarterlyInstallment(Id contactId) {
        return buildRecurringDonation(contactId, RD_Constants.INSTALLMENT_PERIOD_QUARTERLY);
    }

    /*******************************************************************************************************
    * @description Builds a recurring donation with monthly installment
    * @param contactId Id of the contact to assign to the recurring donation
    * @return npe03__Recurring_Donation__c
    */
    public static npe03__Recurring_Donation__c buildRecurringDonationMonthlyInstallment(Id contactId) {
        return buildRecurringDonation(contactId, RD_Constants.INSTALLMENT_PERIOD_MONTHLY);
    }

    /*******************************************************************************************************
    * @description Builds a recurring donation with weekly installment
    * @param contactId Id of the contact to assign to the recurring donation
    * @return npe03__Recurring_Donation__c
    */
    public static npe03__Recurring_Donation__c buildRecurringDonationWeeklyInstallment(Id contactId) {
        return buildRecurringDonation(contactId, RD_Constants.INSTALLMENT_PERIOD_WEEKLY);
    }

    /*******************************************************************************************************
    * @description Builds a recurring donation with default values
    * @param contactId Id of the contact to assign to the recurring donation
    * @param installmentPeriod An installment period to assign to the recurring donation
    * @return npe03__Recurring_Donation__c
    */
    public static npe03__Recurring_Donation__c buildRecurringDonation(Id contactId, String installmentPeriod) {
        return TEST_RecurringDonationBuilder.constructLegacyBuilder()
            .withContact(contactId)
            .withAmount(100)
            .withPlannedInstallments(2)
            .withInstallmentPeriod(installmentPeriod)
            .withDateEstablished(DEFAULT_ESTABLISHED_DATE)
            .withScheduleTypeMultiplyValue()
            .withOpenEndedStatusNone()
            .build();
    }

    /*******************************************************************************************************
    * @description Creates recurring donation settings with yearly forecast as default
    * @return void
    */
    public static void createRdSettingsWithYearForecast() {
        createRdSettingsWithForecast(12);
    }

    /*******************************************************************************************************
    * @description Creates recurring donation settings
    * @param forecastMonths Forecast month number
    * @return void
    */
    public static void createRdSettingsWithForecast(Integer forecastMonths) {
        UTIL_CustomSettingsFacade.getRecurringDonationsSettingsForTest(new npe03__Recurring_Donations_Settings__c(
            npe03__Opportunity_Forecast_Months__c = forecastMonths,
            npe03__Maximum_Donations__c = 50,
            npe03__Open_Opportunity_Behavior__c = RD_RecurringDonations.RecurringDonationCloseOptions.Mark_Opportunities_Closed_Lost.name()
        ));
    }

    /*******************************************************************************************************
    * @description Creates recurring donation settings specific to campaigns and
    * sets forecast to yearly forecast
    * @return void
    */
    public static void createRdSettingsCampaignWithYearForecast() {
        UTIL_CustomSettingsFacade.getRecurringDonationsSettingsForTest(new npe03__Recurring_Donations_Settings__c(
            npe03__Opportunity_Forecast_Months__c = 12,
            npe03__Maximum_Donations__c = 50,
            npe03__Open_Opportunity_Behavior__c = RD_RecurringDonations.RecurringDonationCloseOptions.Mark_Opportunities_Closed_Lost.name(),
            npe03__Add_Campaign_to_All_Opportunites__c = true
        ));
    }

    /*********************************************************************************************************
    * @description Retrieve Primary Opportunity Contact Roles for specified Recurring Donations
    * @param rdIds Recurring Donation Ids
    * @return List<OpportunityContactRole>
    */
    private static List<OpportunityContactRole> getPrimaryOppContactRoles(Set<Id> rdIds) {
        List<OpportunityContactRole> ocrs = new List<OpportunityContactRole>([
            SELECT ContactId, OpportunityId, Role
            FROM OpportunityContactRole
            WHERE Opportunity.npe03__Recurring_Donation__c IN :rdIds
            AND isPrimary = true
        ]);

        return ocrs == null ? new List<OpportunityContactRole>() : ocrs;
    }

    /*******************************************************************************************************
    * @description Retrieves Opportunities for the specified recurring donations
    * @param rds List of recurring donations
    * @return List<Opportunity>
    */
    private static List<Opportunity> getOpps(List<npe03__Recurring_Donation__c> rds) {
        return getOpps((new Map<Id, Sobject>(rds)).keySet());
    }

    /*******************************************************************************************************
    * @description Retrieves Opportunities for the specified recurring donation
    * @param rdId Id of the recurring donation
    * @return List<Opportunity>
    */
    private static List<Opportunity> getOpps(Id rdId) {
        return getOpps(new Set<Id> { rdId });
    }

    /*******************************************************************************************************
    * @description Retrieves Opportunities for the specified recurring donations
    * @param rdIds Ids of recurring donations
    * @return List<Opportunity>
    */
    private static List<Opportunity> getOpps(Set<Id> rdIds) {
        return [
            SELECT Name, Amount, Accountid, CloseDate, isDeleted
            FROM Opportunity
            WHERE npe03__Recurring_Donation__c IN :rdIds
        ];
    }

    /*******************************************************************************************************
    * @description Retrieves Opportunities for the specified recurring donation and orders them by Close Date
    * @param rdId Id of the recurring donation
    * @return List<Opportunity>
    */
    public static List<Opportunity> getOppsOrderByCloseDate(Id rdId) {
        return [
            SELECT Id, Name, Amount, AccountId,
                CloseDate, Description, CampaignId
            FROM Opportunity
            WHERE npe03__Recurring_Donation__c = :rdId
            ORDER BY CloseDate
        ];
    }

    /*******************************************************************************************************
    * @description Returns numbef of Opportunities for the specified recurring donation
    * @param rdId Id of the recurring donation
    * @return Integer
    */
    public static Integer getOpenOppCount(Id rdId) {
        return [
            SELECT COUNT()
            FROM Opportunity
            WHERE npe03__Recurring_Donation__c = :rdId
            AND isClosed = false
        ];
    }
 }