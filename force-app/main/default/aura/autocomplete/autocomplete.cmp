<aura:component >

    <aura:handler name="init" value="{!this}" action="{!c.doInit}"/>
    <aura:handler name="optionSelected" event="c:autocompleteSelectListOption" action="{!c.handleOptionSelected}"/>

    <aura:attribute name="items" type="Object[]" default="[]" access="private"/>
    <aura:attribute name="keyword" type="String" access="private"/>
    <aura:attribute name="inputFocused" type="Boolean" default="false" access="private"/>
    <aura:attribute name="placeholder" type="String" default="" access="public"/>
    <aura:attribute name="label" type="String" default="" access="public"/>
    <aura:attribute name="searchContext" type="String" default="" access="public"/>
    <aura:attribute name="displayValue" type="String" default="" access="public"/>
    <aura:attribute name="value" type="Object" access="public"/>
    <aura:attribute name="dataProvider" type="Aura.Component[]" required="true" access="public"/>
    <aura:attribute name="itemVar" default="item" type="String" access="public"/>
    <aura:attribute name="isListVisible" default="false" type="Boolean" access="public"/>
    <aura:attribute name="idDataCallback" type="Integer" default="0" access="private" />
    
    <aura:method name="clearList" action="{!c.clearList}" access="public" />

    <aura:attribute name="itemTemplate" type="Aura.ComponentDefRef[]" access="public">
        <c:autocompleteOption value="{!item}" displayValue="{!item}"/>
    </aura:attribute>

    <aura:attribute name="listFooter" type="Aura.Component[]" description="A facet below the rendered list, for use as a list footer" access="public"/>
    <aura:attribute name="showListHeader" type="Boolean" default="true" description="Indicates whether the listHeader is visible. The default is true." access="public"/>
    <aura:attribute name="showListFooter" type="Boolean" default="true" description="Indicates whether the listFooter is visible. The default is true." access="public"/>
    <aura:attribute name="loadingIndicator" type="Aura.Component[]" description="Content to be shown while the list is loading" access="public"/>
    <aura:attribute name="showLoadingIndicator" type="Boolean" default="false" access="public"/>
    <aura:attribute name="emptyListContent" type="Aura.Component[]" description="Content to be shown if the list is empty" access="public"/>
    <aura:attribute name="disabledSearch" type="Boolean" default="false" description="attribute to notify the search handler that is an arrow key and the search has not to be performed"/>
    <aura:handler event="c:HH_KeypressEvent" action="{!c.handleKeypressOnList}"/>
    <aura:registerEvent name="newFocussedElement" type="c:HH_NewFocussedElement"/>
    <aura:registerEvent name="reachFooter" type="c:HH_ReachFooter"/>
    
    <div class="slds-combobox_container" aura:id="autocomplete">
        <div
             class="{!'' + (and(!empty(v.value), !empty(v.displayValue)) ? 'slds-has-selection' : '')}"
             data-select="single"
             data-scope="single"
             data-typeahead="true">
            <div class="slds-combobox slds-dropdown-trigger slds-dropdown-trigger_click">
                <aura:if isTrue="{!!empty(v.label)}">
                    <span class="slds-form-element__label slds-float_left" id="inputLabel" >{!v.label}</span>
                </aura:if>
                <div class="slds-form-element__control slds-input-has-icon slds-input-has-icon_right" onfocusin="{!c.handleFocusInput}" aria-labelledby="inputLabel">
                    <ui:inputText aura:id="input"
                                  class="{!'slds-combobox__input slds-input ' + (and(!empty(v.value), !empty(v.displayValue)) ? 'slds-hide' : '')}"
                                  placeholder="{!v.placeholder}"
                                  value="{!v.displayValue}"
                                  updateOn="keyup"
                                  keyup="{!c.handleKeypressOnInput}"
                                  />
                    <span class="slds-icon_container slds-icon-utility-search slds-input__icon slds-input__icon_right">
                        <lightning:icon iconName="utility:search"
                                    class="slds-icon slds-icon slds-icon_x-small slds-icon-text-default"
                                    size="x-small"
                                    />
                    </span>
                </div>
            </div>

            <div class="{!'slds-dropdown slds-dropdown_length-with-icon-7 slds-dropdown_fluid' + (v.isListVisible ? ' slds-show' : ' slds-hide')}" role="listbox" aura:id="list" tabindex="-1" onfocusin="{!c.handleListFocus}" onfocusout="{!c.handleListBlur}" onfocus="{!c.handleListFocus}" onblur="{!c.handleListBlur}">
                <ul aura:id="ullist" tabindex="-1" class="slds-listbox slds-listbox_vertical">
                    <aura:if isTrue="{!v.showListHeader}">
                        <li class="slds-listbox__item">
                            <span class="slds-media slds-listbox__option slds-listbox__option_entity slds-listbox__option_term">
                                <lightning:icon iconName="utility:search" class="slds-media__figure slds-listbox__option-icon" size="small"/>
                                &quot;{!v.keyword}&quot; {!if(!empty(v.searchContext), v.searchContext, '')}
                            </span>
                        </li>
                    </aura:if>
                    <aura:if isTrue="{!v.showLoadingIndicator}">
                        {!v.loadingIndicator}
                    </aura:if>
                    <aura:if isTrue="{!!empty(v.items.length)}">
                        <aura:iteration aura:id="iter" items="{!v.items}" var="{!v.itemVar}"  body="{!v.itemTemplate}"/>
                        <aura:set attribute="else">
                            {!v.emptyListContent}
                        </aura:set>
                    </aura:if>
                    <aura:if isTrue="{!v.showListFooter}">
                        {!v.listFooter}
                    </aura:if>
                </ul>
            </div>
        </div>
    </div>

</aura:component>