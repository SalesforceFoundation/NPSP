<apex:component layout="none" id="util_formfield">
    <apex:attribute name="field" type="String" description="The field to display." required="true"/>
    <apex:attribute name="sObj" type="sObject" description="The sObject the field belongs to." required="true"/>
    <apex:attribute name="sObjType" type="String" description="The sObject type." required="true"/>
    <apex:attribute name="onchange" type="String"  default="" description="On change event."/>
    <apex:attribute name="required" type="Boolean" default="" description="When true marks the field as required, otherwise, the field is marked as required based on 'nillable' value." />
    <apex:attribute name="styleClass" type="String" default="" description="The style to apply to the outer form element." />
    <apex:attribute name="labelOverride" type="String" default="" description="Override the standard field label with this text" />
    <apex:attribute name="showLabel" type="Boolean" default="true" description="When false, hide the field label" />
    <apex:attribute name="overrideRequired" type="Boolean" default="false" description="When true, it will set the field as not required" />

    <apex:attribute name="ariaDescription" type="String" default="" description="override aria description"/>

    <!-- Action Support assumes onchange event and calling page has an action status component on the page -->
    <apex:attribute name="actSup" type="Boolean" default="false" description="When true the input field will render action support, defaults to false." />
    <apex:attribute name="actSupAction" type="ApexPages.Action" default="" description="Action for the onchange action support to fire." />
    <apex:attribute name="actSupReRender" type="String" default="" description="Component id on the main page to rerender after onchange event." />
    <apex:attribute name="actSupStatus" type="String" default="loading" description="The id of the action status on the main page to display when fired, defaults to loading." />
    <apex:attribute name="actSupImmediate" type="Boolean" default="false" description="Sets immediate attribute on the action status, defaults to false" />

    <!-- Dependent picklists and multipicklists require additional css -->
    <apex:variable var="dependent" value="{!$ObjectType[sObjType].fields[field].dependentPicklist}"/>
    <!-- NOTE: When using a variable for determining readonly or field type in combination with conditionally rendering output panels, some field values do not save -->
    <apex:variable var="ftype" value="{!$ObjectType[sObjType].fields[field].type}"/>
    <!-- The fixup style class to apply to dependent and date fields -->
    <apex:variable var="fixup"
        value="{!IF(dependent, IF(ftype=='picklist', ' dependentPicklistFixup', ' dependentMultiPicklistFixup'),'')}"/>
    <!-- The field label to be displayed -->
    <apex:variable var="label" value="{!$ObjectType[sObjType].fields[field].label}" rendered="{!labelOverride == ''}"/>
    <apex:variable var="label" value="{!labelOverride}" rendered="{!labelOverride != ''}"/>

    <!-- Read only fields will be displayed as outputfields with a bottom divider per slds standards, checkboxes will render as disabled input checkboxes -->
    <apex:outputPanel layout="none" id="divOutput"
        rendered="{!((!$ObjectType[sObjType].fields[field].updateable && sObj['Id']!='')
                    || !$ObjectType[sObjType].fields[field].createable) && $ObjectType[sObjType].fields[field].accessible}">
        <div class="{!'slds-form-element ' + styleClass}">
            <apex:outputLabel for="outputX" styleClass="slds-form-element__label" rendered="{!showLabel == true && ftype!='boolean'}">
                {!label}
            </apex:outputLabel>
            <div class="{!'slds-form-element__control' + IF(ftype!='boolean', ' slds-has-divider_bottom slds-p-left_small','')}">
                <!-- Blank space fixes issue where an empty span on read only fields were blank causing the line to shift when no value present -->
                <apex:outputField id="outputX" value="{!sObj[field]}" styleClass="slds-form-element__static" rendered="{!ftype!='boolean'}">&nbsp;</apex:outputField>
                <apex:outputPanel layout="{!IF(ftype=='boolean', 'inline', 'none')}" styleClass="{!IF(ftype=='boolean', 'slds-checkbox', '')}" id="outerpanel">
                    <apex:outputLabel for="outputCB" styleClass="slds-checkbox__label" rendered="{!ftype=='boolean'}" id="field-label-output">
                        <apex:inputCheckbox value="{!sObj[field]}" id="outputCB" disabled="true" rendered="{!ftype=='boolean'}" />
                        <span class="slds-checkbox_faux"></span>
                        <apex:outputPanel rendered="{!showLabel == true}" layout="none">
                            <span class="slds-form-element__label">{!label}</span>
                        </apex:outputPanel>
                    </apex:outputLabel>
                </apex:outputPanel>
            </div>
        </div>
    </apex:outputPanel>

    <!-- Updateable fields will render as input fields with the appropriate slds style - note that Record Type Id is displayed as a picklist by Salesforce. -->
    <apex:outputPanel layout="block" styleClass="{!'slds-form-element ' + styleClass + fixup}" id="divInput"
        rendered="{!($ObjectType[sObjType].fields[field].updateable
                    || $ObjectType[sObjType].fields[field].createable && sObj['Id']=='') && $ObjectType[sObjType].fields[field].type != 'boolean'}">        
        <apex:outputLabel for="{!$Component.inputx.util_inputfield.inputx}" styleClass="slds-form-element__label" rendered="{!showLabel == true && ftype!='boolean'}" id="lblInputField">
            <apex:outputText rendered="{!IF(required == true, true, NOT($ObjectType[sObjType].fields[field].nillable))}" id="lblInputFieldRequired">
                <abbr class="slds-required" title="{!$Label.lblRequired}">*</abbr>
            </apex:outputText>
            <apex:outputText rendered="{!showLabel == true}" value="{!label}"/>
        </apex:outputLabel>
        <div class="slds-form-element__control">
            <c:UTIL_InputField field="{!field}" sObj="{!sObj}" sObjType="{!sObjType}" 
                onchange="{!onchange}" actSupAction="{!actSupAction}"
                actSupReRender="{!actSupReRender}" actSup="{!actSup}" 
                actSupStatus="{!actSupStatus}" actSupImmediate="{!actSupImmediate}"
                required="{!IF(overrideRequired, false, IF(required == true, true, NOT($ObjectType[sObjType].fields[field].nillable)))}" 
                ariaLabel="{!label}"
                ariaDescription="{!ariaDescription}"
                id="inputx"
            />
        </div>
    </apex:outputPanel>

    <!-- Updateable boolean fields need to have input within the label span. -->
    <apex:outputPanel layout="block" styleClass="{!'slds-form-element ' + styleClass}" id="divInputCheckbox"
        rendered="{!($ObjectType[sObjType].fields[field].updateable
                    || $ObjectType[sObjType].fields[field].createable && sObj['Id']=='') && $ObjectType[sObjType].fields[field].type == 'boolean'}">
        <div class="slds-form-element__control">
            <apex:outputLabel styleClass="slds-checkbox" for="inputCB" id="lblCheckbox">
                <apex:inputField id="inputCB" value="{!sObj[field]}" label=""
                    html-aria-description="{!IF(ISBLANK(ariaDescription), $ObjectType[sObjType].fields[field].label, ariaDescription)}">
                    <apex:actionSupport event="onchange" action="{!actSupAction}" reRender="{!actSupReRender}" rendered="{!actSup}" status="{!actSupStatus}" immediate="{!actSupImmediate}"/>
                </apex:inputField>
                    <span class="slds-checkbox_faux"></span>
                    <apex:outputPanel rendered="{!showLabel == true}" layout="none">
                        <span class="slds-form-element__label">{!label}</span>
                    </apex:outputPanel>
            </apex:outputLabel>
        </div>
        <script type="text/javascript">
            (function() {
                var oc = '{!onchange}';
                var input = document.getElementById("{!$Component.inputCB}");

                // Add onchange event only when needed
                if (oc) input.setAttribute("onchange", oc);
            })();
        </script>
    </apex:outputPanel>
</apex:component>