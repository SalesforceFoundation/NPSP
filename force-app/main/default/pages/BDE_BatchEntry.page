<apex:page standardController="Batch__c" extensions="BDE_BatchEntry_CTRL" tabStyle="Batch_Data_Entry__tab" action="{!initializeBatchEntry}">

	<apex:includeScript value="{!URLFOR($Resource.CumulusStaticResources, '/jquery/jquery-3.5.0.min.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.CumulusStaticResources, '/jquery-ui/jquery-ui-1.10.4.min.js')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.CumulusStaticResources, '/jquery-ui/jquery-ui-1.10.4-smoothness.min.css')}"/>
    <apex:includeScript value="{!URLFOR($Resource.CumulusStaticResources, '/BDE_jqtablesorter/BDE_jqtablesorter.min.js')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.CumulusStaticResources, '/BDE_jqtablesorter/style.css')}"/>

    <apex:includeLightning />

    <script type="text/javascript" >
        var j$ = jQuery.noConflict();
     
        window.onunload = unloadpage;
        
        function unloadpage(){
            saveBatch();
        }            
     
     
        function sortThis() {
            j$(".tablesorter").tablesorter(
            {
            sortClassAsc: 'headerSortUp',   
            sortClassDesc: 'headerSortDown',
            headerClass: 'header'
             });
        };    
        
        function getSetUp() {
            var formId = "{!$Component.recInfo}";
            var nextIndex;

//          j$(".btnSave").focus( function(event) {j$(".fadeMe").fadeIn();});
            j$(".formClass").fadeTo('fast', 1);
            
            j$(".editLink, .delLink").click( function(event) {
                j$(".formClass").fadeTo('fast', .2);
            });
            
            j$(".batchName, .batchStatus").change( function(event) {
                j$(".formClass").fadeTo('fast', .2);
            });

            j$(".btnSave").click( function(event) {
                j$(".formClass").fadeTo('fast', .2);
                saveDefaults();
            }); 
            
            // Turn checkboxes into 'pushpin' buttons
            j$(".defaultCheckbox").button();
            
            // Tab Index
            j$(".sticky input, .sticky select").each(function(i, theInput) {
                if (theInput.className.indexOf('defaultCheckbox') == -1) { 
                    theInput.setAttribute('tabIndex', i+1);
                    nextIndex = i+2;
                    if (i==0) theInput.focus();
                }
            });
            j$(".btnSave").attr('tabIndex', nextIndex);

            // Adjust 'pushpin' placement to accomodate required field divs
            j$("div.requiredInput").each(function(i, requiredInputDiv) {
                var theInput = j$(this).next("input");
                if (j$(this).children(".errorMsg").length > 0) {
                    theInput.insertBefore(j$(this).children(".errorMsg")); 
                } else {
                    theInput.appendTo(j$(this));
                }
                /*    theInput.insertAfter(j$(this).children("input")); 
                } else if (j$(this).children("input").length > 0) {
                    theInput.insertAfter(j$(this).children("input"));             
                } else if (j$(this).children("span").length > 0) {
                   theInput.insertAfter(j$(this).children("span"));             
                } else if (j$(this).children("select").length > 0) {
                   theInput.insertAfter(j$(this).children("select"));             
                }*/
                var theLabel = j$(this).next("label");
                theLabel.insertAfter(theInput);
                theLabel.css( {"left":"3px"} ); // fine-tuning
            });
            
/*          j$(window).unload(function(){
                // save the batch
                saveBatch();
            });                        
          
            j$(function() {
                function log( message ) {
                    j$( "<div/>" ).text( message ).prependTo( "#log" );
                    j$( "#log" ).attr( "scrollTop", 0 );
                }
        
                j$( "#birds" ).autocomplete({
                    source: "search.php",
                    minLength: 2,
                    select: function( event, ui ) {
                        log( ui.item ?
                            "Selected: " + ui.item.value + " aka " + ui.item.id :
                            "Nothing selected, input was " + this.value );
                    }
                });
            });
    */  
        }
        
        j$(document).ready(function(){
            getSetUp();
            //get rid of the action buttons and headers on the listview
            j$('.listButtons').remove();
            j$('.listHeader').remove();
            j$('.rolodex').remove();
            //j$('.actionColumn').remove();
            //j$(".actionLink").remove();
        });
        
        var defaultValues = new Object;            
        var defaultValuesLookupIds = new Object;
        var defaultValuesSaved = new Object;            
        var defaultValuesLookupIdsSaved = new Object;
        function saveDefaults() {
            j$(".defaultCheckbox").each( function(i, theCheckbox) {
                fieldClass = theCheckbox.id;
                j$("."+fieldClass).each( function(i, theInput) {
                    var myvalue = theInput.value;
                    if (theInput.type == 'checkbox')
                        myvalue = theInput.checked;
                    if (!theCheckbox.checked || !myvalue || myvalue=='') {
                        if(theInput.id.indexOf('_lkwgt') == -1)
                            delete defaultValues[fieldClass];                                            
                    } else {
                        defaultValues[fieldClass] = theInput.value;
                        if (theInput.type == 'checkbox')
                            defaultValues[fieldClass] = theInput.checked;
                        // if the input field was a lookup store the Id of the referenced record as well                        
                        var theInputLookup = document.getElementById(theInput.id + '_lkid');
                        if(theInputLookup!=null) {
                            defaultValuesLookupIds[fieldClass] = theInputLookup.value;                            
                        }
                        
                        // since a pin was set, clear our saved defaults
                        defaultValuesSaved = null;
                        defaultValuesLookupIdsSaved = null;
                    }
                });
                }
            );  
        }        

        function resetDefaults() {
            // use saved defaults if they exist
            if (defaultValuesSaved != null) {
	            defaultValues = j$.extend({}, defaultValuesSaved);
	            defaultValuesLookupIds = j$.extend({}, defaultValuesLookupIdsSaved);
            }
            j$(".defaultCheckbox").each( function(i, theCheckbox) {
                fieldClass = theCheckbox.id;                
                j$("."+fieldClass).each( function(i, theInput) {
                    if (defaultValues[fieldClass] != null) {
                        theInput.value = defaultValues[fieldClass];
                        if (theInput.type == 'checkbox')
                            theInput.checked = defaultValues[fieldClass];
                        // Set the lookup Id element if the input field is a lookup
                        if(defaultValuesLookupIds[fieldClass] != null) {                      
                            var theInputLookup = document.getElementById(theInput.id + '_lkid');
                            if(theInputLookup!=null) {
                                theInputLookup.value = defaultValuesLookupIds[fieldClass];
                            }
                        }
                        theCheckbox.checked = true;
                    }
                });
                }
            );  
            getSetUp();         
        }
        
        function rememberDefaults() {
            defaultValuesSaved = j$.extend({}, defaultValues);
            defaultValuesLookupIdsSaved = j$.extend({}, defaultValuesLookupIds);
        }        
 
        //turn off the sticky fields when doing certain actions
        function resetSticky(){
            j$(".defaultCheckbox").each( function(i, theCheckbox) {
                theCheckbox.checked = false;
            });
            getSetUp();    
        }

        $Lightning.use("{!namespace}" + ":RD2_EnablementApp", function () {
           $Lightning.createComponent(
               "{!namespace}" + ":utilIllustration",
               {
                  size: "large",
                  title: "{!$Label.bdeRetirementBlockerHeader}",
                  message: "{!$Label.bdeRetirementBlockerMessage}",
                  variant: "lake-mountain",
                  illustrationClass: "slds-p-top_x-large slds-m-top_x-large",
                  shouldWrapText: true
               },
               "retirementPrompt",
               function () { }
           );
        });

    </script>
    <style>
        .ui-autocomplete-loading { background: white url('images/ui-anim_basic_16x16.gif') right center no-repeat; }
    </style>

    <apex:outputPanel rendered="true">
        <apex:sectionHeader title="{!$Label.stgNavBDE}" subtitle="{!pageSubtitle}" />
        <div id='retirementPrompt'></div>
    </apex:outputPanel>

    <apex:outputPanel rendered="false">
        <apex:messages />
        <apex:pageBlock rendered="{!displaySettingsSection}">
            <apex:form >
                <apex:outputText value="Select the object that you want to batch enter: "/>
                <apex:selectList id="objectSelect" value="{!objName}" size="1">
                    <apex:selectOptions value="{!objectSettingsList}"/>
                </apex:selectList>
                &nbsp;
                <apex:commandButton id="newBatch" value="New Batch" title="Create a new Batch for the selected object" action="{!openBatchEnterPage}"/>
                &nbsp;
                <br/><br/>
            </apex:form>
            <apex:pageblocksection title="Existing Batches" columns="1">
                <apex:listViews type="Batch__c" />
            </apex:pageblocksection>
        </apex:pageBlock>

        <apex:form styleClass="formClass" >
            <apex:pageBlock mode="edit" rendered="{!displayBatchSection}" >
                <apex:actionFunction name="saveBatch" action="{!saveBatch}" />
                <apex:outputpanel id="batchinfo">
                    <apex:pageBlockSection columns="2" title="Batch Summary" >
                        <apex:repeat value="{!$ObjectType.Batch__c.FieldSets.BatchDetailView}" var="b">
                            <apex:inputField value="{!batch[b]}" style="width:200px;" onChange="saveBatch();"/>
                        </apex:repeat>
                        <apex:PageBlockSectionItem id="batchsizefield">
                            <apex:OutputLabel for="itemcountfield" value="Batch Size" />
                            <apex:OutputText id="itemcountfield" value="{!itemCount}"/>
                        </apex:PageBlockSectionItem>
                    </apex:pageBlockSection>
                </apex:outputpanel>
            </apex:pageBlock>
        </apex:form>

        <apex:form styleClass="formClass" >
            <apex:pageBlock mode="edit" rendered="{!displayRecInfoSection}" id="pbEdit" >
                <apex:pageMessages />
                <apex:pageBlockButtons location="bottom" >
                    <apex:commandButton value="Save" action="{!save}" styleclass="btnSave" rerender="recInfo,recList,pbEdit,itemCount,batchinfo" oncomplete="resetDefaults();" />
                    <apex:commandButton value="Clear" action="{!clear}" immediate="true" rerender="recInfo" oncomplete="getSetUp();" />
                </apex:pageBlockButtons>
                <apex:pageBlockSection title="Record Information" id="recInfo" columns="2" >
                    <apex:pageblocksectionitem rendered="{!currentItem.renderNPSPContact}">
                        <apex:outputLabel value="NPSP Contact" style="line-height:25px;" />
                        <apex:outputPanel layout="block" styleclass="sticky" >
                            <apex:inputField id="npspcontactid" value="{!currentItem.npspocr.ContactID}" required="false" styleClass="sticky-npspcontactid"/> <!-- onblur="storeLookupValue('{!field.fieldname}');" /> -->
                            <input type="checkbox" id="sticky-npspcontactid" class="defaultCheckbox" style="display:none;" />
                            <label for="sticky-npspcontactid" class="ui-icon ui-icon-pin-s" style="position:relative;top:0px;">Toggle</label>
                        </apex:outputPanel>
                    </apex:pageblocksectionitem>

                    <apex:repeat var="field" value="{!entryFieldList}" >
                        <apex:pageblocksectionitem >
                            <apex:outputLabel value="{!field.fieldLabel}" style="line-height:25px;" />
                            <apex:outputPanel layout="block" styleclass="sticky" >
                                <apex:inputField value="{!currentItem.sobj[field.fieldName]}" styleClass="sticky-{!field.fieldName}"/> <!-- onblur="storeLookupValue('{!field.fieldname}');" /> -->
                                <input type="checkbox" id="sticky-{!field.fieldName}" class="defaultCheckbox" style="display:none;" />
                                <label title="Click to make this value the default" for="sticky-{!field.fieldName}" class="ui-icon ui-icon-pin-s">Toggle</label>
                            </apex:outputPanel>
                        </apex:pageblocksectionitem>
                    </apex:repeat>
                </apex:pageBlockSection>
            </apex:pageBlock>

            <apex:outputPanel id="recList">
                <apex:pageBlock mode="detail" rendered="{!itemCount>0}" >
                    <apex:pageBlockSection columns="1" title="Saved Record List ({!itemCount} records)">
                        <apex:pageBlockTable var="item" value="{!itemList}" width="90%" >
                            <apex:column >
                                <apex:facet name="header">Action</apex:facet>
                                <apex:commandLink value="edit" action="{!item.editItem}" styleclass="editLink" immediate="true" rerender="recInfo" onclick="rememberDefaults();" oncomplete="resetSticky();" />
                                &nbsp;|&nbsp;
                                <apex:commandLink styleclass="delLink" value="del" action="{!item.deleteItem}" immediate="true" rerender="recList,itemCount,batchinfo"  oncomplete="resetDefaults();" />&nbsp;|&nbsp;
                                <apex:outputLink value="/{!item.sobj.Id}" target="_blank">view</apex:outputLink>
                            </apex:column>
                            <apex:repeat var="fieldname" value="{!listFieldList}" >
                                <apex:column value="{!item.sobj[fieldname]}" styleClass="{!fieldname}" />
                            </apex:repeat>
                            <apex:column value="{!item.npspocr.Contactid}" rendered="{!item.renderNPSPContact}"/>
                        </apex:pageBlockTable>
                    </apex:pageBlockSection>
                </apex:pageBlock>
            </apex:outputPanel>
        </apex:form>
    </apex:outputPanel>
</apex:page>
