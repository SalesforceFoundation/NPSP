<apex:page extensions="REL_RelationshipsViewer_CTRL" standardController="Contact" sidebar="false">
    <apex:includeScript value="{!URLFOR($Resource.CumulusStaticResources, '/arbor-v0.92/src/graphics/colors.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.CumulusStaticResources, '/arbor-v0.92/src/graphics/primitives.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.CumulusStaticResources, '/arbor-v0.92/src/graphics/graphics.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.CumulusStaticResources, '/jquery/jquery-3.5.0.min.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.CumulusStaticResources, '/arbor-v0.92/lib/arbor.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.CumulusStaticResources, '/arbor-v0.92/lib/arbor-tween.js')}" />

    <body>
        <canvas id="viewport" width="1000" height="600"></canvas>
        <script>
            var j$ = jQuery.noConflict();
            /*
            these colors are used to show the different levels of relationships
            the base contact starts at purple, and each step removed from the original contact displays at a different color
            purple: "#7A3185"
            dark blue:"#006EA5"
            green:"#009F79"
            yellow:"#f0bc4c"
            orange:"#f07c39"
            */
            var colors = ["#7A3185", "#006EA5", "#009F79", "#f0bc4c", "#f07c39"];

            // this is the object that stores the contact info that displays in the info box
            var currentContact = new Object();
            currentContact.name = '';
            currentContact.accountName = '';
            currentContact.title = '';
            currentContact.id = '';

            // tracks whether you're currently in a mouseover of a node
            // since the mouselisteners are at the canvas level, not on each individual node, you're "mousing over" a node if the distance to the nearest node is less than 50
            var mouseOutComplete = false;
            var particleSystem;
            //contains information about the relationship object metadata for use in linking
            var RelationshipInfo = new Object();
            RelationshipInfo.prefix = '';
            RelationshipInfo.NameField = '';
            RelationshipInfo.NameIdField = '';

            (function(j$) {

                var Renderer = function(canvas) {
                    var canvas = j$(canvas).get(0)
                    var ctx = canvas.getContext("2d");

                    var that = {
                        init:function(system) {
                            particleSystem = system;
                            // resize canvas to window
                            ctx.canvas.width = window.innerWidth - 20;
                            particleSystem.screenSize(canvas.width, canvas.height);
                            particleSystem.screenPadding(80);
                            that.initMouseHandling();
                        },
          
                        redraw:function() {
                            ctx.canvas.width = window.innerWidth - 20;
                            ctx.fillStyle = "white"
                            ctx.fillRect(0,0, canvas.width, canvas.height)
                
                            particleSystem.eachEdge(function(edge, pt1, pt2) {
                                ctx.strokeStyle = "rgba(0,0,0, .333)";
                                ctx.lineWidth = 1;
                                ctx.beginPath();
                                ctx.moveTo(pt1.x, pt1.y);
                                ctx.lineTo(pt2.x, pt2.y);
                                ctx.stroke();

                                if (edge.data.label) {
                                    // set font style
                                    ctx.font = 'italic 10px sans-serif';

                                    // add white box behind text to block line
                                    ctx.fillStyle = "white";
                                    var boxWidth = ctx.measureText(edge.data.label).width;
                                    ctx.fillRect((pt1.x + pt2.x - boxWidth) / 2, (pt1.y + pt2.y) / 2 - 15, boxWidth, 20);

                                    // add label
                                    ctx.fillStyle = "black";
                                    ctx.fillText(edge.data.label, (pt1.x + pt2.x - boxWidth) / 2, (pt1.y + pt2.y) / 2);
                                }
                            })
        
                            particleSystem.eachNode(function(node, pt) {
                                var label = node.data.label||"";
                                var link = node.data.link||"";
                                var w = ctx.measureText(""+label).width + 20;
                                if (!(""+label).match(/^[ \t]*$/)) {
                                    pt.x = Math.floor(pt.x)
                                    pt.y = Math.floor(pt.y)
                                } else {
                                    label = null;
                                }

                                // draw a circle centered at pt
                                if (node.data.color) {
                                    ctx.fillStyle = node.data.color
                                } else {
                                    ctx.fillStyle = "rgba(0,0,0,.2)"
                                }

                                if (node.data.color == 'none') {
                                    ctx.fillStyle = "white"
                                }

                                ctx.beginPath();
                                ctx.arc(pt.x, pt.y, w / 2, 0, 2 * Math.PI, false);
                                ctx.fill();

                                // save this to position info box later
                                node.data.radius = w / 2;

                                // center the label inside the circle 
                                if (label) {
                                    ctx.font = "Bold 12px Helvetica";
                                    ctx.textAlign = "center";
                                    ctx.fillStyle = "white";
                                    if (node.data.color=='none') {
                                        ctx.fillStyle = '#333333';
                                    }
                                    ctx.fillText(label || "", pt.x, pt.y + 4);
                                }
                            })
                            ctx.strokeStyle = "#cccccc"
                            ctx.lineWidth = 1
                            ctx.beginPath()
                        },
        
                        initMouseHandling:function() {
                            // no-nonsense drag and drop (thanks springy.js)
                            var dragged = null;

                            var mouseoverHandler = {
                                mouseover: function (e) {
                                    var pos = j$(canvas).offset();
                                    _mouseP = arbor.Point(e.pageX - pos.left, e.pageY - pos.top)
                                    nearest = particleSystem.nearest(_mouseP);
                                    if (nearest.distance < nearest.node.data.radius + 10) {
                                        if (nearest.node.data.id != currentContact.id || mouseOutComplete) {
                                            currentContact.id = nearest.node.data.id;
                                            currentContact.name = nearest.node.data.label;
                                            if (nearest.node.data.accountName) {
                                                currentContact.accountName = nearest.node.data.accountName;
                                            } else{
                                                currentContact.accountName = '';
                                            }
                                            if (nearest.node.data.title) {
                                                currentContact.title = nearest.node.data.title;
                                            } else {
                                                currentContact.title = '';
                                            }
                                            var infoBox = getContactInfoBox();
                                            mouseOutComplete = false;
                                            drawToolTip(e.pageX-pos.left, e.pageY-pos.top,infoBox);
                                        }                  
                                    } else if (!mouseOutComplete && nearest.distance > 100) {
                                        // hide text box
                                        hideToolTip();
                                    }
                                }
                            }

                            // set up a handler object that will initially listen for mousedowns then
                            // for moves and mouseups while dragging
                            var handler = {
                                clicked:function(e) {
                                    var pos = j$(canvas).offset();
                                    _mouseP = arbor.Point(e.pageX-pos.left, e.pageY-pos.top);
                                    nearest = dragged = particleSystem.nearest(_mouseP);      
                                    
                                    var currNode = particleSystem.getNode(nearest.node.data.id);                                    
                                                                          
                                    //get a list of the existing node relIds and return it to filter our relationship selection
                                    var relIds = new Array();
                                    particleSystem.eachEdge(function(edge, pt1, pt2) {
                                        relIds.push(edge.data.relId);
                                    });
                                    
                                    Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.REL_RelationshipsViewer_CTRL.getRelationships}',
                                        currNode.data.id, false, relIds,function(result, event) {
                                                                                  
                                        if (event.status) {
                                            output = '';  
                                            var relatedNode = null;
                                            var childColorIndex = currNode.data.colorIndex;
                                            if (childColorIndex < colors.length - 1) {
                                                childColorIndex++;
                                            }

                                            var thisLabel = '';
                                            for (var i = 0; i < result.length; i++) {
                                                // if a node for result contact does not exist on the page, create it
                                                relatedNode = particleSystem.getNode(result[i].id);
                                                if (result[i].status == '{!JSINHTMLENCODE($Label.REL_Former)}') {
                                                    thisLabel = result[i].type + ' ({!JSINHTMLENCODE($Label.REL_Former)})';
                                                } else {
                                                    thisLabel = result[i].type;
                                                }                                               
                                
                                                if (!relatedNode) {
                                                    relatedNode = particleSystem.addNode(result[i].id, {label:result[i].firstName + ' ' + result[i].lastName, color:colors[childColorIndex]})
                                                }
                                                // only add edge ifthe relationship is not already drawn
                                                if (particleSystem.getEdges(currNode, relatedNode).length == 0 && particleSystem.getEdges(relatedNode, currNode).length == 0) {
                                                    particleSystem.addEdge(currNode, relatedNode, {label:thisLabel, status:result[i].status, colorIndex:childColorIndex, link:result[i].link, id:result[i].id, title:result[i].title, accountName:result[i].accountName, relId:result[i].relId});
                                                } else { 
                                                    //if edge is already drawn, and the type is not listed, append the additional type to the label for this edge
                                                    var thisEdge;                                                                                                     
                                                    if (particleSystem.getEdges(currNode, relatedNode).length != 0) {
                                                        thisEdge = particleSystem.getEdges(currNode, relatedNode);
                                                    } else {
                                                        thisEdge = particleSystem.getEdges(relatedNode, currNode);                                                    
                                                    }
                                                    var thisEdgeLabel = '';                                                 
                                                    thisEdgeLabel = thisEdge[0].data.label;
                                                    //if this edge doesn't yet have the appended label
                                                    if (thisEdgeLabel.indexOf(thisLabel) == -1) {
                                                        thisEdge[0].data.label = thisEdgeLabel + ', ' + thisLabel;
                                                    }
                                                }                               
                                            }
                                        }   
                                    },{escape:true});
        
                                    if (dragged && dragged.node !== null) {
                                        // while we're dragging, don't let physics move the node
                                        dragged.node.fixed = true
                                    }
                                    j$(canvas).bind('mousemove', handler.dragged)
                                    j$(window).bind('mouseup', handler.dropped)
                                    return false
                                },
                  
                                dragged:function(e) {
                                    var pos = j$(canvas).offset();
                                    var s = arbor.Point(e.pageX-pos.left, e.pageY-pos.top)
        
                                    if (dragged && dragged.node !== null) {
                                        var p = particleSystem.fromScreen(s)
                                        dragged.node.p = p
                                    }
                                    return false;
                                },
        
                                dropped:function(e) {
                                    if (dragged===null || dragged.node===undefined) return;
                                    if (dragged.node !== null) dragged.node.fixed = false;

                                    dragged.node.tempMass = 1000;
                                    dragged = null;
                                    j$(canvas).unbind('mousemove', handler.dragged);
                                    j$(window).unbind('mouseup', handler.dropped);
                                    _mouseP = null;
                                    return false;
                                }                 
                            }               
                        // start listening
                        j$(canvas).mousedown(handler.clicked);
                        j$(canvas).mousemove(mouseoverHandler.mouseover);
                    },      
               }
               return that;
            }    
 
            j$(document).ready(function() {
                var showPermissionError = '{!showPermissionError}';
                if (showPermissionError == "false") {
                    //The initial call to the controller
                    Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.REL_RelationshipsViewer_CTRL.getRelationships}', '{!JSENCODE(id)}', true, null, function(result, event) {
                        if (event.status) {
                            RelationshipInfo = getRelationshipInfo();
                            sys = arbor.ParticleSystem(1000, 200, 0.2) // create the system with sensible repulsion/stiffness/friction
                            //particleSystem = sys;
                            sys.parameters({gravity:true}) // use center-gravity to make the graph settle nicely (ymmv)
                            sys.renderer = Renderer("#viewport") // our newly created renderer will have its .init() method called shortly by sys...

                            var conFirstName;
                            //if (result[0].firstName === "undefined" || result[0].firstName == null) {
                            if (!result[0].firstName) {
                                conFirstName = "";
                            } else {
                                conFirstName = result[0].firstName;
                            }

                            // if there are no relationships, arbor kind of freaks out, so don't let it try to draw a standalone node
                            if (result.length < 2) {
                                var notice = '<p><strong>{!JSINHTMLENCODE($Label.REL_No_Relationships)}</strong></p>';
                                notice += '<p><a href="/' + result[0].id + '" style="color: white; font-weight: bold;" >[ {!JSINHTMLENCODE($Label.REL_Return_to_Contact)} ] </a><br/>';
                                
                                drawToolTip(20, 20, notice);
                            } else {
                                basenode = sys.addNode(result[0].id, {label:conFirstName + ' ' + result[0].lastName, color:colors[0], colorIndex:0, link:result[0].link, id:result[0].id, title:result[0].title, accountName:result[0].accountName})
                                for (var i = 1; i < result.length; i++) {
                                    var thisLabel = '';
                                    if (result[i].status == '{!JSINHTMLENCODE($Label.REL_Former)}') {
                                        thisLabel = result[i].type + ' ({!JSINHTMLENCODE($Label.REL_Former)})';
                                    } else {
                                    	thisLabel = result[i].type;
                                    }
                                    var thisConFirstName = '';
                                    // if (result[i].firstName === "undefined" || result[i].firstName == null) {
                                    if (!result[i].firstName) {
                                        thisConFirstName = '';
                                    } else {
                                        thisConFirstName = result[i].firstName;
                                    }

                                    relatednode = sys.addNode(result[i].id, {label:thisConFirstName + ' ' + result[i].lastName, color:colors[1], colorIndex:1, link:result[i].link, id:result[i].id, title:result[i].title, accountName:result[i].accountName})

                                    //if edge is already drawn, and the type is not listed, append the additional type to the label for this edge
                                    if (sys.getEdges(basenode, relatednode).length != 0) {
                                        var thisEdge;
                                        thisEdge = sys.getEdges(basenode, relatednode);
                                        var thisEdgeLabel = '';
                                        thisEdgeLabel = thisEdge[0].data.label;
                                        thisEdge[0].data.label = thisEdgeLabel + ', ' + thisLabel;
                                    } else {
                                        sys.addEdge(basenode, relatednode, {label:thisLabel, status:result[i].status, relId:result[i].relId})
                                    }
                                }
                            }
                        }
                    },{escape:true});
                } else {
                    document.getElementById("viewport").style.display = "none";
                }

            })
        })(this.jQuery)

        function drawToolTip(x,y,text) {
            j$("#tooltip").css({top: y + 'px', left:  x +'px'});
            j$("#tooltip").animate({opacity: 1.0}, 500);
            j$("#tooltip").html(text);
        }
    
        function hideToolTip() {
            j$("#tooltip").animate({opacity: 0.0}, 50, function() {
                // cheating by adding nonlinked versions of the text, so no one accidentally clicks on an invisible link
                var infoText ='<p><strong>';
                infoText += currentContact.name + '<br />';
                if (currentContact.title) infoText += currentContact.title + '<br />';
                if (currentContact.accountName) infoText += currentContact.accountName + '<br />';
                infoText += '<br />[ {!JSINHTMLENCODE($Label.REL_View_Contact_Record)} ]<br />';
                infoText += '[ {!JSINHTMLENCODE($Label.REL_Create_New_Relationship)}  ]<br />';
                infoText += '[ {!JSINHTMLENCODE($Label.REL_RECenter)} ]<br />';
                infoText +='</strong></p>';  
                j$("#tooltip").html(infoText);             
            });
            mouseOutComplete = true;        
        }
    
        function getRelationshipInfo() {
            //retrieve metadata about the Relationship object in this org
            if (RelationshipInfo.prefix == '') {
                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.REL_RelationshipsViewer_CTRL.getRelationshipInfo}', function(result,event) {
                    if (event.status)
                        RelationshipInfo = result;                      
                });       
            }        
            return RelationshipInfo;
        }
    
        function getContactInfoBox() {
            var infoText ='<p><strong>';
            infoText += currentContact.name + '<br />';
            if (currentContact.title) infoText += currentContact.title + '<br />';
            if (currentContact.accountName) infoText += currentContact.accountName + '<br />';
            infoText += '<br /><a href=/' + currentContact.id + ' target="_blank" style="color: white; font-weight: bold;">[ {!JSINHTMLENCODE($Label.REL_View_Contact_Record)} ]</a><br />';
        
            //retrieve metadata about the Relationship object in this org
            var ri = getRelationshipInfo();
                   
            var RelPrefix = ri.prefix;
            
            var RelNameId = '';
            if (ri.NameField != null)
            RelNameId = ri.NameField + '=';
            var RelNameIdId = '';
            if (ri.NameIdField != null)
               RelNameIdId = ri.NameIdField + '=';
            
            var uriString = '/' + RelPrefix + '/e?';
            if (RelNameId != '' && RelNameIdId != '')
                uriString += RelNameId + currentContact.name + '&' + RelNameIdId + currentContact.id + '&';  
        
            uriString += 'retURL=' + currentContact.id;
            var encodedNewRel = encodeURI(uriString);
            infoText += '<a href=' + encodedNewRel + ' target="_blank" style="color: white; font-weight: bold;" >[ {!JSINHTMLENCODE($Label.REL_Create_New_Relationship)} ]</a><br />';
            infoText += '<a href=/apex/REL_RelationshipsViewer?id=' + currentContact.id + ' target="_parent" style="color: white; font-weight: bold;">[ {!JSINHTMLENCODE($Label.REL_RECenter)} ]</a><br />';
            infoText +='</strong></p>';     
            return infoText;    
        }

            //From Juan Mendes here: http://js-bits.blogspot.com/2010/07/canvas-rounded-corner-rectangles.html
            function roundRect(ctx, x, y, width, height, radius, fill, stroke) {
                if (typeof stroke == "undefined") {
                    stroke = true;
                }
                if (typeof radius === "undefined") {
                    radius = 5;
                }
                ctx.beginPath();
                ctx.moveTo(x + radius, y);
                ctx.lineTo(x + width - radius, y);
                ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
                ctx.lineTo(x + width, y + height - radius);
                ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
                ctx.lineTo(x + radius, y + height);
                ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
                ctx.lineTo(x, y + radius);
                ctx.quadraticCurveTo(x, y, x + radius, y);
                ctx.closePath();
                if (stroke) {
                    ctx.stroke();
                }
                if (fill) {
                    ctx.fill();
                }
            }
        </script>

        <apex:pageMessages />

        <div style="/* box-shadow: 4px 3px 8px rgba(0, 0, 0, 0.80); -moz-box-shadow: 4px 3px 8px rgba(0, 0, 0, 0.80);-webkit-box-shadow: 4px 3px 8px rgba(0, 0, 0, 0.80);*/-moz-border-radius: 4px; border-radius: 4px; opacity: 0.0; padding:12px; position:absolute; top: 0px; left: 0px; color: white; background-color: #991111; font-face: Helvtica; font-size: 12px;"
            id="tooltip">
            <h1> </h1>
        </div>
    </body>
</apex:page>