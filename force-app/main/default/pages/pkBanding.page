<apex:page controller="pkBanding_CTRL" showHeader="true" sidebar="false"
           docType="html-5.0" title="PK Banding" >
    <head>
        <apex:slds />

        <style type="text/css">
            .logs-panel {
                word-wrap: break-word;
                font-size: x-small;
                font-family: monospace;
                background-color:gainsboro;
                margin-left: 5px;
                margin-right: 5px;
            }

        </style>

        <script type="text/js-worker">
            onmessage = (oEvent) => {

                // env vars                
                let startTime = Date.now();

                // web service
                async function web_worker(requestData) {

                    postMessage(requestData);
                    if (requestData.isCursor) {                        
                        postMessage(`>> Starting web_worker(${requestData.band}:${requestData.offset}) for:`);
                    } else {                        
                        postMessage(`ooo >> Starting re-try logic, processing <b>${requestData.batchSize}</b> record(s) of <b>${requestData.recordIds.length}</b> in total.`);
                    }
                    
                    // create async request
                    fetch(requestData.url, {
                        method: 'POST',
                        body: JSON.stringify(requestData),
                        mode: 'cors',
                        headers: {
                            'Authorization': `Bearer ${requestData.session}`,
                            'Content-Type': 'application/json'
                        }
                    }).then(
                        response => {
                            // response exists && status == 200
                            if (typeof response !== 'undefined' && response.ok) {
                                // handle somewhere else
                                return response.json();
                            }

                            // re-Try logic when we hit governor limits on salesforce and service returns != 200 status
                            const t = getRandomInt(1000, 3000);
                            const b = (requestData.batchSize*0.75) | 0 ;

                            // re-try logic while batch size is greater than 0
                            if (b>0) {
                                requestData.batchSize = b;
                                if (requestData.isCursor) {                                    
                                    postMessage(`<** Error on request for web_worker(${requestData.band}:${requestData.offset}): Re-Try logic using batchSize=${b} (fetching in ${t/1000}s)...`);
                                } else {                                    
                                    postMessage(`ooo <** Error on request for fixed web_worker [${requestData.batchSize} of ${requestData.recordIds.length} in total]: Re-Try logic using batchSize=${b} (fetching in ${t/1000}s)...`);
                                }
                                
                                // set random timeout | usually Apex CPU Time Exceeded
                                setTimeout(()=>{web_worker(requestData)}, t);
                            } else {
                                if (requestData.isCursor) {                                                                            
                                    postMessage(`<<[[[[[ Re-Try logic ended because batchSize reached minimum amount (0) | web_worker(${requestData.band}:${requestData.offset}) ]]]]]`);
                                } else {                                    
                                    postMessage(`ooo <<[[[[[ Re-Try logic ended because batchSize reached minimum amount (0) | fixed web_worker [${requestData.batchSize} of ${requestData.recordIds.length} in total] ]]]]]`);
                                }           
                            }                           

                        }
                    ).then(
                        jsonResponse => {

                            if (typeof jsonResponse !== 'undefined') {
                                // clone cursor
                                let reqData = clone(jsonResponse.cursor);
                                postMessage(jsonResponse);
                                // log data to JS
                                if (requestData.isCursor) {                                    
                                    postMessage(`<< web_worker(${reqData.band+':'+reqData.offset}) response:`);
                                } else {
                                    // clone function is not working correctly for set of Ids, need to replace it with the one in response 
                                    reqData.recordIds = jsonResponse.cursor.recordIds                                    
                                    postMessage(`ooo << fixed web_worker response (${requestData.batchSize} of ${requestData.recordIds.length} in total):`);
                                }
                                
                                // evaluate response
                                if (jsonResponse.result && !jsonResponse.completed) {
                                    
                                    // log info                                     
                                    if (requestData.isCursor) {                                        
                                        postMessage(`&nbsp; >> Creating next web_worker(${reqData.band+':'+reqData.offset})...`);
                                    } else {                                        
                                        postMessage(`&nbsp; ooo >> Creating next fixed web_worker[${reqData.batchSize}:${reqData.recordIds.length}]...`);                                    
                                    }
                                                                        
                                    // send partial results to JS
                                    let jsResponse = {
                                        totalEvents: jsonResponse.numberProcessed,                                              
                                        totalFailed: jsonResponse.numberErrors,
                                        failedRecords: jsonResponse.failedRecords,
                                        failedRecordsIds: jsonResponse.failedRecordsIds,
                                        band: jsonResponse.cursor.band,                                                                          
                                        completed: false,
                                        timeInSeconds: (Date.now() - startTime)/1000,
                                        isCursor: reqData.isCursor
                                    };
                                    postMessage(jsResponse);

                                    // recursive call to get remaining data
                                    web_worker(reqData);

                                } else if (!jsonResponse.result) {

                                    const t = getRandomInt(1000, 3000); // number
                                    const b = (jsonResponse.cursor.batchSize*0.75) | 0 ;
                                    reqData.batchSize = b;

                                    // if processed data, send partial results to JS
                                    if (jsonResponse.numberProcessed > 0 || jsonResponse.numberErrors>0) {
                                        let jsResponse = {
                                            totalEvents: jsonResponse.numberProcessed,  
                                            totalFailed: jsonResponse.numberErrors,
                                            failedRecords: jsonResponse.failedRecords,
                                            failedRecordsIds: jsonResponse.failedRecordsIds,
                                            band: jsonResponse.cursor.band,                                            
                                            completed: false,
                                            timeInSeconds: (Date.now() - startTime)/1000,
                                            isCursor: reqData.isCursor
                                        };
                                        postMessage(jsResponse);
                                    }
                                    
                                    if (b>0) {
                                        if (requestData.isCursor) {                                        
                                            postMessage(`&nbsp; ><* Error in web_worker(${reqData.band+':'+reqData.offset}) response: Re-Try logic with batchSize=${b} (fetching in ${t/1000}s)...`);
                                        } else {                                        
                                            postMessage(`&nbsp; ooo ><* Error in web_worker[${reqData.batchSize}:${reqData.recordIds.length}] response: Re-Try logic with batchSize=${b} (fetching in ${t/1000}s)...`);                                    
                                        }                                        
                                        // set random timeout | usually DataLakeServiceApi - InteralServerError message
                                        setTimeout(()=>{web_worker(reqData)}, t);
                                    } else {
                                        if (requestData.isCursor) {                                                                            
                                            postMessage(`<<[[[[[ Re-Try logic ended because batchSize reached minimum amount (0) | web_worker(${requestData.band}:${requestData.offset}) ]]]]]`);
                                        } else {                                    
                                            postMessage(`ooo <<[[[[[ Re-Try logic ended because batchSize reached minimum amount (0) | fixed web_worker [${requestData.batchSize} of ${requestData.recordIds.length} in total] ]]]]]`);
                                        }                                    
                                    }                                   

                                } else if (jsonResponse.completed) {

                                    // return results to JS
                                    let jsResponse = {
                                        totalEvents: jsonResponse.numberProcessed, 
                                        totalFailed: jsonResponse.numberErrors,
                                        failedRecords: jsonResponse.failedRecords,
                                        failedRecordsIds: jsonResponse.failedRecordsIds,
                                        band: jsonResponse.cursor.band,                                        
                                        completed: true,
                                        timeInSeconds: (Date.now() - startTime)/1000,
                                        isCursor: jsonResponse.cursor.isCursor
                                    };
                                    // return results
                                    postMessage(jsResponse);
                                    
                                }
                            }else{                                
                                // re-Try logic when we hit governor limits on salesforce and service returns != 200 status
                                const t = getRandomInt(1000, 3000);
                                const b = (requestData.batchSize*0.75) | 0 ;

                                // re-try logic while batch size is greater than 0
                                if (b>0) {
                                    requestData.batchSize = b;                                    
                                    if (requestData.isCursor) {                                    
                                        postMessage(`<** jsonResponse is undefined for web_worker(${requestData.band}:${requestData.offset}): Re-Try logic using batchSize=${b} (fetching in ${t/1000}s)...`);
                                    } else {                                    
                                        postMessage(`ooo <** jsonResponse is undefined for fixed web_worker [${requestData.batchSize} of ${requestData.recordIds.length} in total]: Re-Try logic using batchSize=${b} (fetching in ${t/1000}s)...`);
                                    }                                    
                                    // set random timeout | usually Apex CPU Time Exceeded
                                    setTimeout(()=>{web_worker(requestData)}, t);
                                } else {
                                    if (requestData.isCursor) {                                                                            
                                        postMessage(`<<[[[[[ Re-Try logic ended because batchSize reached minimum amount (0) | web_worker(${requestData.band}:${requestData.offset}) ]]]]]`);
                                    } else {                                    
                                        postMessage(`ooo <<[[[[[ Re-Try logic ended because batchSize reached minimum amount (0) | fixed web_worker [${requestData.batchSize} of ${requestData.recordIds.length} in total] ]]]]]`);
                                    }                                    
                                }  
                            }

                        } // end jsonResponse => {
                    );

                }

                // clone objs
                function clone(obj) {
                    // aux var
                    let copy;
                    // handle nulls
                    if (null == obj || "object" != typeof obj) return obj;
                    // handle Object
                    if (obj instanceof Object) {
                        copy = {};
                        for (let attr in obj) {
                            if (obj.hasOwnProperty(attr)) copy[attr] = clone(obj[attr]);
                        }
                        return copy;
                    }
                }

                // random integer between min and max
                function getRandomInt(min, max) {
                    return Math.floor(Math.random() * (max - min) + min);
                }

                // init web worker
                web_worker(oEvent.data);

            };
        </script>

        <script>
            // worker
            var workerBlob = new Blob(Array.prototype.map.call(document.querySelectorAll('script[type=\'text\/js-worker\']'), function (oScript) { return oScript.textContent; }),{type: 'text/javascript'});
            // Creating a new document.worker property containing all our "text/js-worker" scripts.
            var documentworker = new Worker(window.URL.createObjectURL(workerBlob));

            // sfdc consts
            const __sfdcSessionId = '{!getSessionId()}';            
            const __serviceUrl = '{!baseUrl}' + '/services/apexrest/pkbanding';
            const __lock = 'UNABLE_TO_LOCK_ROW'; // TODO: what about 'storage limit exceeded'? 

            // app vars
            let totalEvents; 
            let totalFailed; 
            let errorRatio;  
            let fixed_totalEvents; 
            let fixed_totalFailed; 
            let fixed_errorRatio;         
            let startTime;
            let totalBands;
            let bandsCompleted;
            let timer;
            let reTryTimer;
            let totalSeconds = 0;
            const partitionBits = 3;
            // re-try-row-lock var
            let rowLock = [];            

            // handle web-worker responses
            documentworker.onmessage = function(oEvent) {

                let eData = oEvent.data;

                if (eData === undefined) {
                    return 'Undefined value!';
                }

                // string data
                if (typeof eData === 'string') {
                    log(eData);

                // cursor type of data
                } else if (eData.isCursor && eData.totalEvents!=null && eData.timeInSeconds!=null && eData.totalFailed!=null) {

                    // app vars
                    totalEvents += eData.totalEvents;
                    totalFailed += eData.totalFailed;
                    errorRatio = totalFailed === 0 ? 0 : ((totalFailed/totalEvents) * 100).toFixed(3);

                    // capture IDs of errors that contain __lock string
                    if (eData.totalFailed>0 && eData.failedRecordsIds!=undefined) {
                        for (let i of eData.failedRecordsIds){
                            if (!rowLock.includes(i) && eData.failedRecords[i].indexOf(__lock)!=-1) rowLock.push(i);
                        }
                    }

                    // aux metric vars                    
                    let totTransactionsPerSecond = Math.round(totalEvents/eData.timeInSeconds);
                    let totTransactionsPerDay = Math.round((totalEvents/eData.timeInSeconds)*86400);
                    let totTransactionsPerHour = Math.round((totalEvents/eData.timeInSeconds)*3600);

                    // update results card
                    document.getElementById('results-total').innerHTML = format_num(totalEvents);                    
                    document.getElementById('results-failed').innerHTML = format_num(totalFailed); 
                    document.getElementById('results-failed-ratio').innerHTML = `( ${errorRatio}% )`;                   
                    document.getElementById('results-perday').innerHTML = format_num(totTransactionsPerDay);
                    document.getElementById('results-perhour').innerHTML = format_num(totTransactionsPerHour);
                    document.getElementById('results-transactions-seconds').innerHTML = format_num(totTransactionsPerSecond);

                    // when completed
                    if (eData.completed) {

                        bandsCompleted++;
                        log(' -----------------------------------------------');
                        log(` &emsp; #error-ratio: <b>${errorRatio}%</b>`);
                        log(` &emsp; #failed events: ${format_num(totalFailed)}`);
                        log(` &emsp; #total-events: <b>${format_num(totalEvents)}</b>`);
                        log(`<b>&nbsp; ${eData.band}:${eData.offset} = completed</b>`);
                        log(' -----------------------------------------------');
                        
                        // calculate percentage of completion based on bands vs total-bands
                        const perc = ((bandsCompleted/totalBands) * 100).toFixed(3);
                        
                        // 100% of web-workers completed
                        if (Math.round(perc)===100) {

                            show_element(false,'spinner');
                            clearInterval(timer);
                            log(' -----------------------------------------------------');
                            log(` >> ${totalBands} web-workes are finished (${timer})! `);                            
                            log(' -----------------------------------------------------');
                                                        
                            // RE-TRY Logic for row_lock errors
                            if (rowLock.length>0) {
                                // display spinner and panel of results
                                show_element(true,'spinner');                            
                                show_element(true,'fixed-panel');
                                // TODO?: timer for re-try logic
                                // reTryTimer = setInterval(setTime, 1000);

                                log(rowLock);                                
                                log(`>> Re-try logic is needed for ${rowLock.length} record(s) caused by ${__lock} exception. Preparing fixed web-worker request...`);                                
                                
                                // call web_worker with rowLock ids --- batch size hardcoded to 200
                                let requestData = {
                                    band: null,
                                    chunkBits: null,                                    
                                    partitionBits: null,
                                    offset: null,
                                    session: __sfdcSessionId,
                                    url: __serviceUrl,
                                    isCursor: false,
                                    recordIds: rowLock,
                                    batchSize: 200
                                };
                                // post and clean rowLock
                                documentworker.postMessage(requestData);
                                rowLock = [];
                            }
                        }
                        // update progress bar
                        document.getElementById('results-progress').style.width = `${perc}%`;
                    }

                // fixed type of data
                } else if (!eData.isCursor && eData.totalEvents!=null && eData.totalFailed!=null) {
                    
                    fixed_totalEvents += eData.totalEvents;
                    fixed_totalFailed += eData.totalFailed;
                    fixed_errorRatio = fixed_totalFailed === 0 ? 0 : ((fixed_totalFailed/fixed_totalEvents) * 100).toFixed(3);

                    // capture IDs of errors that contain __lock string
                    if (eData.totalFailed>0 && eData.failedRecordsIds!=undefined) {
                        for (let i of eData.failedRecordsIds){
                            if (!rowLock.includes(i) && eData.failedRecords[i].indexOf(__lock)!=-1) rowLock.push(i);
                        }
                        log(`ooo >>> Exist ${eData.totalFailed} failed RDs with ${__lock} exception in fixed web-worker: ${eData.failedRecordsIds}`);
                    }

                    // update results card
                    document.getElementById('fixed-results-total').innerHTML = format_num(fixed_totalEvents);                    
                    document.getElementById('fixed-results-failed').innerHTML = format_num(fixed_totalFailed); 
                    document.getElementById('fixed-results-failed-ratio').innerHTML = `( ${fixed_errorRatio}% )`;                    

                    // when completed
                    if (eData.completed) {
                        show_element(false,'spinner');                        
                        log(' =============================================');
                        log(` &emsp; #error-ratio: <b>${fixed_errorRatio}%</b>`);
                        log(` &emsp; #failed events: ${format_num(fixed_totalFailed)}`);
                        log(` &emsp; #total-events: <b>${format_num(fixed_totalEvents)}</b>`);
                        log(`<b>&nbsp; Fixed web-workers completed in ${eData.timeInSeconds} seconds.</b>`);
                        log(' =============================================');
                        log(`${fixed_totalFailed>0?rowLock:''}`);                        
                    }

                } else {
                    log(eData);
                }

            };            

            function log(content) {
                // console.info(content);
                let str = typeof content === 'string' ? content : JSON.stringify(content);
                str = str.length>10000 ? `${str.substring(0,10000)}...` : str;
                let previousHtml = document.getElementById('results').innerHTML;
                // if we already have a lot of content, delete it to avoid page crash
                if (previousHtml.length>50000) {
                    previousHtml =  previousHtml.substring(0, previousHtml.substring(0, 6000).lastIndexOf("<br>"));
                }
                // log content
                document.getElementById('results').innerHTML = '<br/><p>' + str + '</p>' + previousHtml;
            }

            // counter
            function setTime() {
                ++totalSeconds;
                document.getElementById('results-seconds').innerHTML = pad(totalSeconds % 60);
                document.getElementById('results-minutes').innerHTML = pad(parseInt(totalSeconds / 60));
            }

            function pad(val) {
                let valString = val + '';
                if (valString.length < 2) {
                    return '0' + valString;
                } else {
                    return valString;
                }
            }

            // clean log panel and re-init app variables
            function clean_log() {
                // html results
                document.getElementById('results').innerHTML = '';
                document.getElementById('results').classList.add('logs-panel');
                document.getElementById('results-total').innerHTML = '-';  
                document.getElementById('results-failed').innerHTML = '-';     
                document.getElementById('results-failed-ratio').innerHTML = '';  
                document.getElementById('results-transactions-seconds').innerHTML = '-';
                document.getElementById('results-perday').innerHTML = '-';
                document.getElementById('results-progress').style.width = '0%';                
                document.getElementById('results-minutes').innerHTML = 00;
                document.getElementById('results-seconds').innerHTML = 00;
                document.getElementById('fixed-results-total').innerHTML = '';                    
                document.getElementById('fixed-results-failed').innerHTML = ''; 
                document.getElementById('fixed-results-failed-ratio').innerHTML = '';  
                show_element(false,'fixed-panel');
                // app vars
                totalEvents = 0;       
                totalFailed = 0;     
                errorRatio = 0;    
                totalBands = 0;
                bandsCompleted = 0;
                startTime = Date.now();
                totalSeconds = 0;
                rowLock = [];
                fixed_totalEvents = 0;
                fixed_totalFailed = 0;
                fixed_errorRatio = 0;
                
            }

            // clone function for objects
            function clone(obj) {
                // aux var
                let copy;
                // handle object
                if (null == obj || "object" != typeof obj) return obj;
                // Handle Object
                if (obj instanceof Object) {
                    copy = {};
                    for (let attr in obj) {
                        if (obj.hasOwnProperty(attr)) copy[attr] = clone(obj[attr]);
                        if (attr instanceof Date) copy[attr].setTime(attr.getTime());
                    }
                    return copy;
                }
                // if instance is not object
                throw new Error("Unable to copy obj! Its type isn't supported.");
            }

            function format_num (num) {
                // Nine Zeroes for Billions
                return Math.abs(Number(num)) >= 1.0e+9

                    ? Math.abs(Number(num)) / 1.0e+9 + 'B'
                    // Six Zeroes for Millions
                    : Math.abs(Number(num)) >= 1.0e+6

                        ? Math.abs(Number(num)) / 1.0e+6 + 'M'
                        // Three Zeroes for Thousands
                        : Math.abs(Number(num)) >= 1.0e+3

                            ? Math.abs(Number(num)) / 1.0e+3 + 'K'

                            : Math.abs(Number(num));
            }

            function show_element(show,elementId) {
                var x = document.getElementById(elementId);
                x.style.display = show ? 'block' : 'none';
            }  

            // parallel execution
            async function execute_parallel(useWorkers) {

                // clear and start logs
                clean_log();
                // start timer
                timer = setInterval(setTime, 1000);
                // show spinner
                show_element(true,'spinner');
                let offset = document.getElementById("offset").value === '' ? null : document.getElementById("offset").value;
                
                // execute a web worker per band
                for (let i = 0; i < 2**partitionBits; i++){
                    totalBands++;
                    let requestData = {                                                
                        band: i,
                        isCursor: true,
                        chunkBits: 15,
                        batchSize: parseInt(document.getElementById("batch").value),
                        partitionBits: partitionBits,
                        offset: null,
                        recordIds: null,
                        session: __sfdcSessionId,
                        url: __serviceUrl
                    };
                    // post
                    documentworker.postMessage(requestData);
                }
            } 

            function fixed_run() {
                // init app variables
                clean_log();
                // fixed array
                rowLock = ["a095e000000BG5ZAAW", "a095e000000BG5aAAG", "a095e000000BG5bAAG", "a095e000000BG5cAAG", "a095e000000BG5dAAG", "a095e000000BG5eAAG", "a095e000000BG5fAAG", "a095e000000BG5gAAG", "a095e000000BG5hAAG", "a095e000000BG5iAAG", "a095e000000BG5jAAG", "a095e000000BG5kAAG", "a095e000000BG5lAAG", "a095e000000BG5mAAG", "a095e000000BG5nAAG", "a095e000000Bm7GAAS", "a095e000000Bm7HAAS", "a095e000000Bm7IAAS", "a095e000000Bm7JAAS", "a095e000000Bm7KAAS", "a095e000000Bm7LAAS", "a095e000000Bm7MAAS", "a095e000000Bm7NAAS", "a095e000000Bm7OAAS", "a095e000000Bm7PAAS", "a095e000000Bm7QAAS", "a095e000000Bm7RAAS", "a095e000000Bm7SAAS", "a095e000000Bm7TAAS", "a095e000000Bm7UAAS", "a095e000000BW7VAAW", "a095e000000BW7WAAW", "a095e000000BW7XAAW", "a095e000000BW7YAAW", "a095e000000BW7ZAAW", "a095e000000BW7aAAG", "a095e000000BW7bAAG", "a095e000000BW7cAAG", "a095e000000BW7dAAG", "a095e000000BW7eAAG", "a095e000000BW7fAAG", "a095e000000BW7gAAG", "a095e000000BW7hAAG", "a095e000000BW7iAAG", "a095e000000BW7jAAG", "a095e000000BOv6AAG", "a095e000000BOv7AAG", "a095e000000BOv8AAG", "a095e000000BOv9AAG", "a095e000000BOvAAAW", "a095e000000BOvBAAW", "a095e000000BOvCAAW", "a095e000000BOvDAAW", "a095e000000BOvEAAW", "a095e000000BOvFAAW", "a095e000000BOvGAAW", "a095e000000BOvHAAW", "a095e000000BOvIAAW", "a095e000000BOvJAAW", "a095e000000BOvKAAW", "a095e000000Bn1dAAC", "a095e000000Bn1eAAC", "a095e000000Bn1fAAC", "a095e000000Bn1gAAC", "a095e000000Bn1hAAC", "a095e000000Bn1iAAC", "a095e000000Bn1jAAC", "a095e000000Bn1kAAC", "a095e000000Bn1lAAC", "a095e000000Bn1mAAC", "a095e000000Bn1nAAC", "a095e000000Bn1oAAC", "a095e000000Bn1pAAC", "a095e000000Bn1qAAC", "a095e000000Bn1rAAC", "a095e000000B6stAAC", "a095e000000B6suAAC", "a095e000000B6svAAC", "a095e000000B6swAAC", "a095e000000B6sxAAC", "a095e000000B6syAAC", "a095e000000B6szAAC", "a095e000000B6t0AAC", "a095e000000B6t1AAC", "a095e000000B6t2AAC", "a095e000000B6t3AAC", "a095e000000B6t4AAC", "a095e000000B6t5AAC", "a095e000000B6t6AAC", "a095e000000B6t7AAC", "a095e000000BfQ4AAK"];
                log(`>> Re-try logic is needed for ${rowLock.length} record IDs caused by ${__lock} exceptions. Preparing fixed web-worker request...`);
                show_element(true,'fixed-panel');
                // call web_worker with rowLock ids --- batch size hardcoded to 200
                let requestData = {
                    band: null,
                    chunkBits: null,                                    
                    partitionBits: null,
                    offset: null,
                    session: __sfdcSessionId,
                    url: __serviceUrl,
                    isCursor: false,
                    recordIds: rowLock,
                    batchSize: 20
                };
                // post
                documentworker.postMessage(requestData);
                rowLock = [];

            }     

        </script>
    </head>

    <body class="slds-scope" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
    <apex:form id="dispatcherform">

        <!-- header -->
        <div class="slds-page-header" >
            <div class="slds-media">
                <div class="slds-media__figure">
                        <span class="slds-icon_container slds-icon-standard-omni_supervisor">
                            <svg class="slds-icon slds-icon_large slds-icon-text-default" aria-hidden="true">
                                <use xlink:href="{!URLFOR($Asset.SLDS,
                                    '/assets/icons/standard-sprite/svg/symbols.svg#omni_supervisor')}"></use>
                            </svg>
                        </span>
                </div>
                <div class="slds-media__body">
                    <h1 class="slds-page-header__title slds-truncate slds-align-middle">Parallelization Engine Prototype | pk-banding</h1>
                    <p><b>Welcome to the Parallelization Engine Prototype. We don't recommend using this page unless explicitly directed to by Salesforce.</b></p>
                    <div class="slds-float_right">
                    </div>
                </div>
            </div>
        </div>

        <!-- body content -->
        <div class="body">
            <!-- CONTENT HERE -->
            <div class="slds-grid">
                <div class="slds-col slds-size_2-of-6 slds-m-around_small">
                    <div class="slds-card">
                        <!-- card title -->
                        <div class="slds-text-heading_medium slds-text-align_center slds-p-top_x-small">
                            <h2>Configure:</h2>
                        </div>
                        <!-- card content -->
                        <div class="slds-grid slds-gutters slds-p-bottom_medium">
                            <div class="slds-col" id="inputsContainerCol">
                                <div class="slds-form-element slds-m-left_medium" id="inputsContainer">
                                    
                                    <label class="slds-form-element__label" for="bits">Choose number of parallel shards:</label>
                                    <select name="bits" id="bits" tabindex="1" class="slds-select" disabled="true">
                                        <option value="1">1 bit (2 shards)</option>
                                        <option value="2">2 bits (4 shards)</option>
                                        <option value="3" selected="true">3 bits (8 shards)</option>
                                        <option value="4">4 bits (16 shards)</option>
                                        <option value="5">5 bits (32 shards)</option>
                                        <option value="6">6 bits (64 shards)</option>
                                        <option value="7">7 bits (128 shards)</option>
                                        <option value="8">8 bits (256 shards)</option>
                                    </select> <br/>

                                    <label class="slds-form-element__label" for="batch">Choose a batch size:</label>
                                    <select name="batch" id="batch" tabindex="2" class="slds-select">
                                        <option value="10">10</option>
                                        <option value="15">15</option>
                                        <option value="15">18</option>
                                        <option value="20" selected="true">20</option>
                                        <option value="20">23</option>
                                        <option value="25">25</option>
                                        <option value="30">30</option>
                                        <option value="100">100</option>
                                        <option value="200">200</option>
                                    </select> <br/>

                                    <label class="slds-form-element__label" for="offset">Type a offset:</label>
                                    <input type="input" class="slds-input" id="offset" value="" placeholder="a093F000009QUOq" tabindex="3" />
                                    <br/>

                                </div>
                            </div>
                            <div id="actionContainer" class="slds-col">
                                <!-- Action Buttons -->    
                                <div class="slds-grid slds-grid_align-center slds-grid_vertical-align-end slds-m-around_large">
                                    <input type="button" value="Fixed Run" onclick="fixed_run()" class="slds-button slds-button_outline-brand" />
                                </div>                            
                                <div class="slds-grid slds-grid_align-center slds-grid_vertical-align-end slds-m-around_large">
                                    <input type="button" value="Call Workers" onclick="execute_parallel(true)" tabindex="4" class="slds-button slds-button_outline-brand" />
                                </div>
                                <div class="slds-grid slds-grid_align-center slds-grid_vertical-align-end slds-m-around_large">
                                    <apex:commandButton id="cleanOrgBtn" value="Clean Org"
                                                        action="{!cleanOrg}" immediate="true"
                                                        styleClass="slds-button slds-button_destructive" tabindex="5" />
                                </div>
                                <div class="slds-spinner_container" id="spinner" style="display: none;">
                                    <div role="status" class="slds-spinner slds-spinner_medium">
                                        <span class="slds-assistive-text">Loading</span>
                                        <div class="slds-spinner__dot-a"></div>
                                        <div class="slds-spinner__dot-b"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div> <!-- END slds-card -->
                    <!-- Results CARD -->
                    <div class="slds-card">
                        <!-- card title -->
                        <div class="slds-text-heading_medium slds-text-align_center slds-p-top_x-small">
                            <h2>Results:</h2>
                            <div class="slds-col slds-m-around_small">
                                <div class="slds-progress-bar" aria-valuemin="0" aria-valuemax="100" aria-valuenow="0" role="progressbar">
                                        <span class="slds-progress-bar__value" style="width:0%" id="results-progress">
                                        </span>
                                </div>
                            </div>
                        </div>
                        <!-- card content -->
                        <div class="slds-grid slds-m-around_small slds-text-heading_medium">
                            <div class="slds-col" id="results-card">
                                <div class="slds-card slds-text-heading_small slds-text-align_right">
                                    Clock: &nbsp;<label id="results-minutes">00</label>:<label id="results-seconds">00</label>
                                </div>
                                <div class="slds-card slds-p-top_x-small">
                                    Transactions Processed:&nbsp;<b><div id="results-total">-</div></b>
                                </div>
                                <div class="slds-card slds-p-top_x-small">
                                    Transactions Failed:&nbsp;<b><div id="results-failed">-</div></b><p class="slds-text-body_small" id="results-failed-ratio"></p>
                                    <div class="slds-text-align_right slds-text-color_error" id="fixed-panel" style="display: none;">
                                        (re-try) Transactions processed:&nbsp;<b><p id="fixed-results-total"></p></b>
                                        (re-try) Transactions failed:&nbsp;<b><p id="fixed-results-failed"></p></b><p class="slds-text-body_small" id="fixed-results-failed-ratio"></p>
                                    </div>
                                </div>
                                <div class="slds-card slds-p-top_x-small">
                                    Transactions per second:&nbsp;<b><div id="results-transactions-seconds">-</div></b>
                                </div>
                                <div class="slds-card slds-p-top_x-small">
                                    Transactions per hour:&nbsp;<b><div id="results-perhour">-</div></b>
                                </div>
                                <div class="slds-card slds-p-top_x-small">
                                    Transactions per day:&nbsp;<b><div id="results-perday">-</div></b>
                                </div>                                
                            </div>
                        </div>
                    </div> <!-- END of Results slds-card -->
                </div>
                <div class="slds-col slds-size_3-of-6 slds-m-around_small">
                    <div class="slds-card" id="logs-card">
                        <!-- card title -->
                        <div class="slds-text-heading_medium slds-text-align_center slds-p-top_x-small">
                            <h2>Logs:</h2>
                        </div>
                        <!-- card content -->
                        <div class="slds-grid slds-grid_align-center slds-grid_vertical-align-end slds-m-around_large">
                            <input type="button" value="Clean Logs" onclick="clean_log()" tabindex="6" class="slds-button slds-button_text-destructive"/>
                        </div>
                        <div id="results" class="slds-text-align_left" tabindex="7">
                            <div class="slds-illustration slds-illustration_large" aria-hidden="true" id="logs-img">
                                <img src="/projRes/ui-home-private/emptyStates/noAssistant.svg" class="slds-illustration__svg" alt=""/>
                                <div class="slds-text-color_weak">
                                    <h3 class="slds-text-heading_large">Logs<br/></h3>
                                    <p class="slds-text-heading_medium">
                                        they will show up here to guide us through the dark
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div> <!-- END slds-card -->
                </div>
                <div class="slds-col slds-size_1-of-6">
                </div>
            </div>
        </div>
    </apex:form>
    </body>

</apex:page>